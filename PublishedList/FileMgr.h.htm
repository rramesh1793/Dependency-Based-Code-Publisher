<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "FileMgr.h.htm">FileMgr.h - FileMgr.h.htm</a><br><a href = "FileSystem.h.htm">FileSystem.h - FileSystem.h.htm</a><br><a href = "IFileMgr.h.htm">IFileMgr.h - IFileMgr.h.htm</a><br><br><br>#ifndef FILEMGR_H
#define FILEMGR_H
/////////////////////////////////////////////////////////////////////
// FileMgr.h - find files matching specified patterns              //
//             on a specified path                                 //
// ver 2.2                                                         //
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2016       //
/////////////////////////////////////////////////////////////////////
/*
* Package Operations:
* -------------------
* This package provides a class, FileMgr, and object factory function,
* Create().  It's mission is to search the directory tree, rooted at
* a specified path, looking for files that match a set of specified
* patterns.
*
* It provides virtual functions file(...), dir(...), and done(), which
* an application can override to provide application specific processing
* for the events: file found, directory found, and finished processing.
*
* The package also provides interface hooks that serve the same purpose
* but allow multiple receivers for those events.
*
* Required Files:
* ---------------
*   FileMgr.h, FileMgr.cpp, IFileMgr.h, 
*   FileSystem.h, FileSystem.cpp
*
* Build Process:
* --------------
*   devenv FileMgr.sln /rebuild debug
*
* Maintenance History:
* --------------------
* ver 2.2 : 28 Aug 2016
* - added more prologue comments
* ver 2.1 : 31 Jul 2016
* - added virtual file, dir, and done functions
* - this lets application override instead of registering for event
* ver 2.0 : 12 Mar 2016
* - fixes bug in directory recursion in find(path)
* - reduces scope of for loop in find for efficiency
* ver 1.0 : 11 Mar 2016
* - first release
*/

#include "IFileMgr.h"
#include "../FileSystem/FileSystem.h"

namespace FileManager
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
  class FileMgr : public IFileMgr
  {<button onclick = "myFunc2()">+</button><div id = "mydiv2">
  public:
    using patterns = std::vector&lt;std::string&gt;;
    using File = std::string;
    using Dir = std::string;
    using fileSubscribers = std::vector&lt;IFileEventHandler*&gt;;
    using dirSubscribers = std::vector&lt;IDirEventHandler*&gt;;
    using doneSubscribers = std::vector&lt;IDoneEventHandler*&gt;;

    virtual ~FileMgr() {<button onclick = "myFunc3()">+</button><div id = "mydiv3">}</div>

    //----&lt; set default file pattern &gt;-------------------------------

    FileMgr(const std::string& path) : path_(path)
    {<button onclick = "myFunc4()">+</button><div id = "mydiv4">
      patterns_.push_back("*.*");
      pInstance_ = this;
    }</div>
    //----&lt; return instance of FileMgr &gt;-----------------------------

    static IFileMgr* getInstance()
    {<button onclick = "myFunc5()">+</button><div id = "mydiv5">
      return pInstance_;
    }</div>
    //----&lt; add file pattern, removing default on first call &gt;-------

    void addPattern(const std::string& patt)
    {<button onclick = "myFunc6()">+</button><div id = "mydiv6">
      if (patterns_.size() == 1 && patterns_[0] == "*.*")
        patterns_.pop_back();
      patterns_.push_back(patt);
    }</div>
    //----&lt; applications can overload this or reg for fileEvt &gt;------

    virtual void file(const File& f)
    {<button onclick = "myFunc7()">+</button><div id = "mydiv7">
      ++numFilesProcessed;
      for (auto pEvtHandler : fileSubscribers_)
      {<button onclick = "myFunc8()">+</button><div id = "mydiv8">
        pEvtHandler-&gt;execute(f);
      }</div>
    }</div>
    //----&lt; applications can overload this or reg for dirEvt &gt;-------

    virtual void dir(const Dir& fpath)
    {<button onclick = "myFunc9()">+</button><div id = "mydiv9">
      for (auto pEvtHandler : dirSubscribers_)
      {<button onclick = "myFunc10()">+</button><div id = "mydiv10">
        pEvtHandler-&gt;execute(fpath);
      }</div>
    }</div>
    //----&lt; applications can overload this or reg for doneEvt &gt;------

    virtual void done()
    {<button onclick = "myFunc11()">+</button><div id = "mydiv11">
      for (auto pEvtHandler : doneSubscribers_)
      {<button onclick = "myFunc12()">+</button><div id = "mydiv12">
        pEvtHandler-&gt;execute(numFilesProcessed);
      }</div>
    }</div>
    //----&lt; start search on previously specified path &gt;--------------

    void search()
    {<button onclick = "myFunc13()">+</button><div id = "mydiv13">
      find(path_);
      done();
    }</div>
    //----&lt; search current path including subdirectories &gt;-----------

    void find(const std::string& path)
    {<button onclick = "myFunc14()">+</button><div id = "mydiv14">
      std::string fpath = FileSystem::Path::getFullFileSpec(path);
      dir(fpath);
      for (auto patt : patterns_)
      {<button onclick = "myFunc15()">+</button><div id = "mydiv15">
        std::vector&lt;std::string&gt; files = FileSystem::Directory::getFiles(fpath, patt);
        for (auto f : files)
        {<button onclick = "myFunc16()">+</button><div id = "mydiv16">
          file(f);
        }</div>
      }</div>
      std::vector&lt;std::string&gt; dirs = FileSystem::Directory::getDirectories(fpath);
      for (auto d : dirs)
      {<button onclick = "myFunc17()">+</button><div id = "mydiv17">
        if (d == "." || d == "..")
          continue;
        std::string dpath = fpath + "\\" + d;
        find(dpath);
      }</div>
    }</div>
    //----&lt; applications use this to register for notification &gt;-----

    void regForFiles(IFileEventHandler* pHandler)
    {<button onclick = "myFunc18()">+</button><div id = "mydiv18">
      fileSubscribers_.push_back(pHandler);
    }</div>
    //----&lt; applications use this to register for notification &gt;-----

    void regForDirs(IDirEventHandler* pHandler)
    {<button onclick = "myFunc19()">+</button><div id = "mydiv19">
      dirSubscribers_.push_back(pHandler);
    }</div>
    //----&lt; applications use this to register for notification &gt;-----

    void regForDone(IDoneEventHandler* pHandler)
    {<button onclick = "myFunc20()">+</button><div id = "mydiv20">
      doneSubscribers_.push_back(pHandler);
    }</div>
  private:
    std::string path_;
    patterns patterns_;
    size_t numFilesProcessed = 0;
    fileSubscribers fileSubscribers_;
    dirSubscribers dirSubscribers_;
    doneSubscribers doneSubscribers_;
    static IFileMgr* pInstance_;
  }</div>;

  inline IFileMgr* FileMgrFactory::create(const std::string& path)
  {<button onclick = "myFunc21()">+</button><div id = "mydiv21">
    return new FileMgr(path);
  }</div>
}</div>
#endif

</pre></body></html>