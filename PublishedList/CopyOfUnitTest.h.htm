<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "CopyOfUnitTest.h.htm">CopyOfUnitTest.h - CopyOfUnitTest.h.htm</a><br><a href = "Cpp11-BlockingQueue.cpp.htm">Cpp11-BlockingQueue.cpp - Cpp11-BlockingQueue.cpp.htm</a><br><a href = "FileSystem.cpp.htm">FileSystem.cpp - FileSystem.cpp.htm</a><br><br><br>#ifndef UNITTEST_H
#define UNITTEST_H
///////////////////////////////////////////////////////////////
// UnitTest.cpp - Demonstrate unit testing framework         //
// ver 1.1                                                   //
// --------------------------------------------------------- //
// copyright © Jim Fawcett, 2012, 2013                       //
// All rights granted provided that this notice is retained  //
// --------------------------------------------------------- //
// Jim Fawcett, CSE687-Object Oriented Design, Spring 2013   //
///////////////////////////////////////////////////////////////

#include &lt;string&gt;
#include &lt;iostream&gt;

namespace Test
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
  void Title(const std::string& title, char ch='=')
  {<button onclick = "myFunc2()">+</button><div id = "mydiv2">
    std::cout &lt;&lt; "\n  " &lt;&lt; title;
    std::cout &lt;&lt; "\n " &lt;&lt; std::string(title.size() + 2, ch);
  }</div>

  template &lt;typename T&gt;
  class TestBase
  {<button onclick = "myFunc3()">+</button><div id = "mydiv3">
  public:

    typedef bool (T::*Test) ();

    virtual ~TestBase() {<button onclick = "myFunc4()">+</button><div id = "mydiv4">}</div>

    // Your test driver implements this for each major test
    // - call a sequence of doTest(TestN)s
    //-----------------------------------------------------
    virtual bool test()=0;

    // Executes test functions inside a try block
    //-------------------------------------------
    bool doTest(Test atest) 
    {<button onclick = "myFunc5()">+</button><div id = "mydiv5"> 
      try
      {<button onclick = "myFunc6()">+</button><div id = "mydiv6">
        return (dynamic_cast&lt;T*&gt;(this)-&gt;*atest)();
      }</div>
      catch (std::exception& ex)
      {<button onclick = "myFunc7()">+</button><div id = "mydiv7">
        std::cout &lt;&lt; "\n  failed: " &lt;&lt; ex.what();
        return false;
      }</div>
      catch(...)
      {<button onclick = "myFunc8()">+</button><div id = "mydiv8">
        std::cout &lt;&lt; "\n  failed: thrown structured exception";
        return false;
      }</div>
    }</div>
    // Call this in your test functions to save duplicating output statements
    //-----------------------------------------------------------------------
    bool checkResult(bool predicate, std::string testname)
    {<button onclick = "myFunc9()">+</button><div id = "mydiv9">
      std::string name = std::string(typeid(*this).name()) + "::" + testname;
      name = name.substr(6, name.size() - 6);
      if(predicate)
        return passed(name);
      else
        return failed(name);
    }</div>
  protected:
    bool passed(const std::string& name)
    {<button onclick = "myFunc10()">+</button><div id = "mydiv10">
      std::cout &lt;&lt; "\n  passed: " &lt;&lt; name;
      return true;
    }</div>
    bool failed(const std::string& name)
    {<button onclick = "myFunc11()">+</button><div id = "mydiv11">
      std::cout &lt;&lt; "\n  failed: " &lt;&lt; name;
      return false;
    }</div>
  }</div>;
}</div>
#endif

</pre></body></html>