<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "Cpp11-BlockingQueue.cpp.htm">Cpp11-BlockingQueue.cpp - Cpp11-BlockingQueue.cpp.htm</a><br><a href = "FileSystem.cpp.htm">FileSystem.cpp - FileSystem.cpp.htm</a><br><a href = "Test1.cpp.htm">Test1.cpp - Test1.cpp.htm</a><br><a href = "Utilities.cpp.htm">Utilities.cpp - Utilities.cpp.htm</a><br><a href = "Utilities.h.htm">Utilities.h - Utilities.h.htm</a><br><br><br>///////////////////////////////////////////////////////////////////////
// Utilities.cpp - small, generally usefule, helper classes          //
// ver 1.2                                                           //
// Language:    C++, Visual Studio 2015                              //
// Application: Most Projects, CSE687 - Object Oriented Design       //
// Author:      Jim Fawcett, Syracuse University, CST 4-187          //
//              jfawcett@twcny.rr.com                                //
///////////////////////////////////////////////////////////////////////

#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include "Utilities.h"

using namespace Utilities;

std::function&lt;void(const std::string&)&gt; Title =
  [](auto src) {<button onclick = "myFunc1()">+</button><div id = "mydiv1"> StringHelper::Title(src, '='); }</div>;

std::function&lt;void(const std::string&)&gt; title =
  [](auto src) {<button onclick = "myFunc2()">+</button><div id = "mydiv2"> StringHelper::Title(src, '-'); }</div>;

void StringHelper::title(const std::string& src)
{<button onclick = "myFunc3()">+</button><div id = "mydiv3">
  std::cout &lt;&lt; "\n  " &lt;&lt; src;
  std::cout &lt;&lt; "\n " &lt;&lt; std::string(src.size() + 2, '-');
}</div>

void StringHelper::Title(const std::string& src, char underline)
{<button onclick = "myFunc4()">+</button><div id = "mydiv4">
  std::cout &lt;&lt; "\n  " &lt;&lt; src;
  std::cout &lt;&lt; "\n " &lt;&lt; std::string(src.size() + 2, underline);
}</div>

std::vector&lt;std::string&gt; StringHelper::split(const std::string& src)
{<button onclick = "myFunc5()">+</button><div id = "mydiv5">
  std::vector&lt;std::string&gt; accum;
  std::string temp;
  size_t index = 0;
  do
  {<button onclick = "myFunc6()">+</button><div id = "mydiv6">
    while ((isspace(src[index]) || src[index] == ',') && src[index] != '\n')
    {<button onclick = "myFunc7()">+</button><div id = "mydiv7">
      ++index;
      if (temp.size() &gt; 0)
      {<button onclick = "myFunc8()">+</button><div id = "mydiv8">
        accum.push_back(temp);
        temp.clear();
      }</div>
    }</div>
    if(src[index] != '\0')
      temp += src[index];
  }</div> while (index++ &lt; src.size());
  if(temp.size() &gt; 0)
    accum.push_back(temp);
  return accum;
}</div>

void Utilities::putline()
{<button onclick = "myFunc9()">+</button><div id = "mydiv9">
  std::cout &lt;&lt; "\n";
}</div>

#ifdef TEST_UTILITIES

int main()
{<button onclick = "myFunc10()">+</button><div id = "mydiv10">
  Title("Testing Utilities Package");
  putline();

  title("test StringHelper::split(std::string)");

  std::string test = "a, \n, bc, de, efg, i, j k lm nopq rst";
  std::cout &lt;&lt; "\n  test string = " &lt;&lt; test;
  
  std::vector&lt;std::string&gt; result = StringHelper::split(test);
  
  std::cout &lt;&lt; "\n";
  for (auto item : result)
  {<button onclick = "myFunc11()">+</button><div id = "mydiv11">
    if (item == "\n")
      std::cout &lt;&lt; "\n  " &lt;&lt; "newline";
    else
      std::cout &lt;&lt; "\n  " &lt;&lt; item;
  }</div>
  std::cout &lt;&lt; "\n";

  title("test std::string Converter&lt;T&gt;::toString(T)");

  std::string conv1 = Converter&lt;double&gt;::toString(3.1415927);
  std::string conv2 = Converter&lt;int&gt;::toString(73);
  std::string conv3 = Converter&lt;std::string&gt;::toString("a_test_string plus more");

  std::cout &lt;&lt; "\n  Converting from values to strings: ";
  std::cout &lt;&lt; conv1 &lt;&lt; ", " &lt;&lt; conv2 &lt;&lt; ", " &lt;&lt; conv3;
  putline();

  title("test T Converter&lt;T&gt;::toValue(std::string)");

  std::cout &lt;&lt; "\n  Converting from strings to values: ";
  std::cout &lt;&lt; Converter&lt;double&gt;::toValue(conv1) &lt;&lt; ", ";
  std::cout &lt;&lt; Converter&lt;int&gt;::toValue(conv2) &lt;&lt; ", ";
  std::cout &lt;&lt; Converter&lt;std::string&gt;::toValue(conv3);

  std::cout &lt;&lt; "\n\n";
  return 0;
}</div>
#endif

</pre></body></html>