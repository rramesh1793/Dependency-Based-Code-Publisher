<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "FileSystem.h.htm">FileSystem.h - FileSystem.h.htm</a><br><a href = "NoSqlDatabaseApp.h.htm">NoSqlDatabaseApp.h - NoSqlDatabaseApp.h.htm</a><br><a href = "Utilities.h.htm">Utilities.h - Utilities.h.htm</a><br><br><br>#pragma once
//////////////////////////////////////////////////////////////////////////////////////
// 	CSE 687 Project 3-  Dependency based CodePublisher	                           //
//  NoSqlDatabaseApp.h -  Class designed for operating on the dependency table    //
//  ver 1.0                                                                      //
//  Language:      Visual C++ 2008, SP1                                         //
//  Platform:      Macbook Pro, Windows 10			                           //
//  Application:   CodeAnalyzerEx                                             //
//  Author:        Rajesh Ramesh            SUID:416867192		             //
//////////////////////////////////////////////////////////////////////////////
/*
Module Operations:
==================
This module defines a Dependency class where its functions 
are designed to store dependency relationships

Public Interface:
=================
Element Class-ElementItem represents a data record in the NoSql database   
which needs to store the data of the child
Dependency Class
Build Process:
==============
Required files
-Tokenizer
-TypeTable
-CppProperties

Maintenance History:
====================
ver 1.0 : 15 Mar 17
- first release
*/
#include &lt;sstream&gt;
#include &lt;vector&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;ctime&gt;
#include "../Tokenizer/Tokenizer.h"
#include "../TypeTable/TypeTable.h"
#include "../CppProperties/CppProperties.h"
#include "../Utilities/Utilities.h"
using Key = std::string;
using Keys = std::vector&lt;Key&gt;;
using File = std::string;
using Files = std::vector&lt;File&gt;;
using Pattern = std::string;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;
using Helper = Utilities::StringHelper;
using namespace Utilities;


class ElementItem
{<button onclick = "myFunc1()">+</button><div id = "mydiv1"> public:
	using Name = std::string;
	std::vector&lt;std::string&gt; childrenList;
	std::string showelement();}</div>;

/////////////////////////////////////////////////////////////////////
// NoSqlDatabaseApp class represents a key/value pair in-memory database   //
// which stores and retrieves elements                           //
//////////////////////////////////////////////////////////////////

class Dependency
{<button onclick = "myFunc2()">+</button><div id = "mydiv2">
public:
	using Key = std::string;
	using Keys = std::vector&lt;Key&gt;;
	Keys keys(); //keys() - returns the keys of the database
	bool save(Key key, ElementItem elem); //save(Key key) - Saves new element item to the Database
	std::vector&lt;ElementItem&gt; value(Key key); //value(Key key) - returns the ElementItem of a certain key in the Database
	size_t count(); //count() - Returns count of the DataBase
	void Dependency::keydisp(Keys list); //keydisp() -displays all keys in the Database
private:
	using Item = std::pair&lt;Key,std::vector&lt;ElementItem&gt;&gt;;
	std::unordered_map&lt;Key,std::vector&lt;ElementItem&gt;&gt; store;
}</div>;

typename Dependency::Keys Dependency::keys()
{<button onclick = "myFunc3()">+</button><div id = "mydiv3">   Keys keys;
	for (Item item : store)
	{<button onclick = "myFunc4()">+</button><div id = "mydiv4">keys.push_back(item.first);}</div>
	return keys;}</div>
size_t Dependency::count()
{<button onclick = "myFunc5()">+</button><div id = "mydiv5">return store.size();}</div>


std::string ElementItem::showelement() //showelement() - prints the files
{<button onclick = "myFunc6()">+</button><div id = "mydiv6">
	std::ostringstream out;
	out.setf(std::ios::adjustfield, std::ios::left);
	out &lt;&lt;"---&gt;"&lt;&lt; " Children are   " &lt;&lt; " : ";
	std::vector&lt;std::string&gt; c = childrenList;
	for (Key kelemitem : c)
	{<button onclick = "myFunc7()">+</button><div id = "mydiv7"> out &lt;&lt; "  "; out &lt;&lt; kelemitem; }</div>
      out &lt;&lt; "\n";
	return out.str();}</div>

void Dependency::keydisp(Keys list)
{<button onclick = "myFunc8()">+</button><div id = "mydiv8"> for (Key k1 : list)
	{<button onclick = "myFunc9()">+</button><div id = "mydiv9">std::cout &lt;&lt; "\t" &lt;&lt; k1 &lt;&lt; "\n";}</div>
	return;}</div>

bool Dependency::save(Key key, ElementItem elem)
{<button onclick = "myFunc10()">+</button><div id = "mydiv10">
	std::vector&lt;ElementItem&gt; vec;
	vec.push_back(elem);
	if (store.find(key) != store.end())
		return false;
	store[key] = vec;
	return true;}</div>

std::vector&lt;ElementItem&gt; Dependency::value(Key key)
{<button onclick = "myFunc11()">+</button><div id = "mydiv11">   ElementItem elem;
	std::vector&lt;ElementItem&gt; vec;
	if (store.find(key) == store.end())
	{<button onclick = "myFunc12()">+</button><div id = "mydiv12">return vec;}</div>
	return store[key];}</div>







</pre></body></html>