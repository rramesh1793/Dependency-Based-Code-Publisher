<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "Display.h.htm">Display.h - Display.h.htm</a><br><a href = "FileSystem.h.htm">FileSystem.h - FileSystem.h.htm</a><br><a href = "Logger.h.htm">Logger.h - Logger.h.htm</a><br><a href = "NoSqlDatabaseApp.h.htm">NoSqlDatabaseApp.h - NoSqlDatabaseApp.h.htm</a><br><a href = "TypeTable.h.htm">TypeTable.h - TypeTable.h.htm</a><br><br><br>#pragma once
/////////////////////////////////////////////////////////////////////
//  CSE 687 Project 3-  Dependency based CodePublisher             //
//  Display.h -  File to print Type table, and Dependency Table    //
//                                                                 //
//  version 1.0                                                    //
//  Language:      Visual C++ 2008, SP1                            //
//  Platform:      Macbook Pro, Windows 10   			           //
//  Application:   CodeAnalyzerEx                                  //
//  Author:        Rajesh Ramesh   SU ID:416867192	         	   //
/////////////////////////////////////////////////////////////////////

/*
Module Operations:
==================
This module defines three display functions:
Display_Type_Analysis - Displays the Type Table
Display_StrConnComp - Displays the Strongly Connected Components
Display_Dependency_Table - Displays the Dependency Table

Public Interface:
=================
Display_Type_Analysis - displays the Type table
Display_StrConnComp - displays the strongly connected components
Display_Dependency_Table - displays the dependency table

Build Process:
==============
Required files to execute this are:
-Dependency
-TypeTable
-StrongComponenent
-Utilities

Maintenance History:
====================
ver 2.0 : 07 Apr 17

*/

#include &lt;sstream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;ctime&gt;
#include &lt;functional&gt;
#include &lt;map&gt;
#include &lt;unordered_map&gt;
#include &lt;exception&gt;
#include &lt;iomanip&gt;
#include &lt;chrono&gt;
#include &lt;algorithm&gt;
#include "../FileSystem/FileSystem.h"
#include "../FileMgr/FileMgr.h"
#include "../Parser/ActionsAndRules.h"
#include "../Parser/ConfigureParser.h"
#include "../AbstractSyntaxTree/AbstrSynTree.h"
#include "../Logger/Logger.h"
#include "../Utilities/Utilities.h"
#include "../Analyzer/Executive.h"
#include "../Parser/Parser.h"
#include "../TypeTable/TypeTable.h"
#include "../Dependency/Dependency.h"
#include "../StrongComponent/StrongComponent.h"
#include "../StrongComponent/StrongComponent.h"
#include "../Persistance/Persistance.h"

using Key = std::string;
using Keys = std::vector&lt;Key&gt;;
using Rslt = Logging::StaticLogger&lt;0&gt;;  
using Demo = Logging::StaticLogger&lt;1&gt;;  
using Dbug = Logging::StaticLogger&lt;2&gt;; 
using Path = std::string;
using File = std::string;
using Files = std::vector&lt;File&gt;;
using Pattern = std::string;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;
using namespace CodeAnalysis;

//Displays the Type Table
void Display_Type_Analysis(NoSqlDatabaseApp db)
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">   TypeAnalysis tanal;
	tanal.doTypeAnalysis(db);
    Keys keys1 = db.keys1();
	for (std::string kchtanal : keys1)
{<button onclick = "myFunc2()">+</button><div id = "mydiv2"> for (Element elem : db.value(kchtanal))
 {<button onclick = "myFunc3()">+</button><div id = "mydiv3"> std::cout &lt;&lt; "\n  " &lt;&lt; kchtanal &lt;&lt; ":   ";
   std::cout &lt;&lt; elem.showchildren();}</div>}</div>}</div>
//Displays strong components
void Display_StrConnComp(std::vector&lt;vector&lt;int&gt;&gt; rfMap, std::unordered_map&lt;int, File&gt; rev)
{<button onclick = "myFunc4()">+</button><div id = "mydiv4"> for (std::vector&lt;int&gt; rscc : rfMap)
 {<button onclick = "myFunc5()">+</button><div id = "mydiv5"> for (int scc : rscc)
   {<button onclick = "myFunc6()">+</button><div id = "mydiv6">	cout &lt;&lt; " " &lt;&lt; rev[scc];	}</div>
		cout &lt;&lt; "\n";}</div> }</div>

//Displays Dependency Table
void Display_Dependency_Table(Dependency dbnew)
{<button onclick = "myFunc7()">+</button><div id = "mydiv7"> Keys key1 = dbnew.keys();
  for (std::string key : key1)
{<button onclick = "myFunc8()">+</button><div id = "mydiv8">	for (auto elem : dbnew.value(key))
  {<button onclick = "myFunc9()">+</button><div id = "mydiv9">	std::cout &lt;&lt; "\n  " &lt;&lt; key &lt;&lt; ":   ";
    std::cout &lt;&lt; elem.showelement();}</div>}</div>}</div>





</pre></body></html>