<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "FileSystem.h.htm">FileSystem.h - FileSystem.h.htm</a><br><a href = "NoSqlDatabaseApp.h.htm">NoSqlDatabaseApp.h - NoSqlDatabaseApp.h.htm</a><br><a href = "Persistance.h.htm">Persistance.h - Persistance.h.htm</a><br><a href = "Test1.cpp.htm">Test1.cpp - Test1.cpp.htm</a><br><a href = "XmlDocument.h.htm">XmlDocument.h - XmlDocument.h.htm</a><br><a href = "XmlElement.cpp.htm">XmlElement.cpp - XmlElement.cpp.htm</a><br><a href = "XmlElement.h.htm">XmlElement.h - XmlElement.h.htm</a><br><br><br>/////////////////////////////////////////////////////////////////////
//  Persistance.h -  Package that supports XMl Parsing              //
//  ver 1.0                                                        //
//  CSE 687 Project 3-  Dependency based CodePublisher              //                                                 //
//  Language:      Visual C++ 2008, SP1                            //
//  Platform:      Macbook Pro, Windows 10		     	           //
//  Application:   NoSql Database                                  //
//  Author:       Rajesh Ramesh  SUID:416867192          		   //
/////////////////////////////////////////////////////////////////////
/*
Module Operations:
==================
This module defines a Persistance class whose
functions populate the XML document and
then return the dataBase object
Public Interface:
=================
toXml
fromXml
Build Process:
==============
Required files
- convert.h
-CppProperties
-NoSQLDataBase
Maintenance History:
====================
ver 1.0 : 15 Mar 17
- first release
*/

#pragma once
#include "../XmlDocument/XmlDocument/XmlDocument.h"
#include "../Convert/Convert.h"
#include "../StrHelper.h"
#include "../XmlDocument/XmlElement/XmlElement.h"
#include "../NoSQLDataBaseApp/NoSQLDataBaseApp.h"
#include "../Dependency/Dependency.h"
#include "../CppProperties/CppProperties.h"
#include&lt;fstream&gt;
using Key = std::string;
using Keys = std::vector&lt;std::string&gt;;
using namespace XmlProcessing;
using SPtr = std::shared_ptr&lt;AbstractXmlElement&gt;;
using Path = std::string;
using File = std::string;
using Files = std::vector&lt;File&gt;;
using Pattern = std::string;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;

/////////////////////////////////////////////////////////////////////////////////////////////////
//toXml() - returns a xml string and used to persist values in the XML Document for dependency//
///////////////////////////////////////////////////////////////////////////////////////////////
std::string toXml(Dependency depb)
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
    std::string xml;
	XmlDocument doc;
    Keys allkeys = depb.keys();
    SPtr pRoot = makeTaggedElement("DatabaseRec");
	doc.docElement() = pRoot;
    for (Key keyss : allkeys)
	{<button onclick = "myFunc2()">+</button><div id = "mydiv2">  SPtr pNameElem = makeTaggedElement("Record");
	   pRoot-&gt;addChild(pNameElem);
       SPtr elekey = makeTaggedElement("EleKey");
	   pNameElem-&gt;addChild(elekey);
	   SPtr tenamekey = makeTextElement(keyss);
	   elekey-&gt;addChild(tenamekey);
	  SPtr ele15 = makeTaggedElement("ChilKeys");
	  pNameElem-&gt;addChild(ele15);
      for (ElementItem k : depb.value(keyss))
	 {<button onclick = "myFunc3()">+</button><div id = "mydiv3">  for (std::string s : k.childrenList)
	  {<button onclick = "myFunc4()">+</button><div id = "mydiv4">		  SPtr techild = makeTaggedElement("Child");
			  ele15-&gt;addChild(techild);
			  SPtr childvalue = makeTextElement(s);
			  techild-&gt;addChild(childvalue);  }</div> }</div>}</div>
	xml = doc.toString();
	try
	{<button onclick = "myFunc5()">+</button><div id = "mydiv5">std::ofstream xmlsam("../raj.xml");
	 xmlsam &lt;&lt; xml;
	 xmlsam.close();}</div>
	catch (const std::exception& excep)
	{<button onclick = "myFunc6()">+</button><div id = "mydiv6">std::cout &lt;&lt; excep.what();}</div>
    return xml;}</div>


///////////////////////////////////////////////////////////////////////////////////////////////
//toxmlstrong - Returns a xml string and used to persist values in the XML Document for SCC //
/////////////////////////////////////////////////////////////////////////////////////////////
std::string toxmlstrong(std::vector&lt;std::vector&lt;int&gt;&gt;& db, std::unordered_map&lt;int, File&gt;& rev)
{<button onclick = "myFunc7()">+</button><div id = "mydiv7">
	std::string xml;
	XmlDocument doc;
	SPtr pRoot = makeTaggedElement("DBX");
	doc.docElement() = pRoot;
	for (std::vector&lt;int&gt; r : db)
	{<button onclick = "myFunc8()">+</button><div id = "mydiv8">	SPtr ele15 = makeTaggedElement("SCC_Component");
		pRoot-&gt;addChild(ele15);
		for  (int a : r)
		{<button onclick = "myFunc9()">+</button><div id = "mydiv9">	SPtr techild = makeTaggedElement("Child");
			ele15-&gt;addChild(techild);
			SPtr childvalue = makeTextElement(rev[a]);
			techild-&gt;addChild(childvalue);
			}</div>}</div>
	xml = doc.toString();
	try
	{<button onclick = "myFunc10()">+</button><div id = "mydiv10"> std::ofstream xmlsam("../rajesh.xml");
		xmlsam &lt;&lt; xml;
		xmlsam.close();
	}</div>
	catch (const std::exception& ex)
	{<button onclick = "myFunc11()">+</button><div id = "mydiv11">	std::cout &lt;&lt; ex.what();}</div>
	return xml;}</div>






</pre></body></html>