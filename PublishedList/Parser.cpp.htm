<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "AbstrSynTree.h.htm">AbstrSynTree.h - AbstrSynTree.h.htm</a><br><a href = "ActionsAndRules.h.htm">ActionsAndRules.h - ActionsAndRules.h.htm</a><br><a href = "ConfigureParser.h.htm">ConfigureParser.h - ConfigureParser.h.htm</a><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "FileSystem.cpp.htm">FileSystem.cpp - FileSystem.cpp.htm</a><br><a href = "FileSystem.h.htm">FileSystem.h - FileSystem.h.htm</a><br><a href = "GrammarHelpers.cpp.htm">GrammarHelpers.cpp - GrammarHelpers.cpp.htm</a><br><a href = "Logger.h.htm">Logger.h - Logger.h.htm</a><br><a href = "OtherSource.h.htm">OtherSource.h - OtherSource.h.htm</a><br><a href = "Parser.h.htm">Parser.h - Parser.h.htm</a><br><a href = "StrHelper.h.htm">StrHelper.h - StrHelper.h.htm</a><br><a href = "Utilities.cpp.htm">Utilities.cpp - Utilities.cpp.htm</a><br><a href = "Utilities.h.htm">Utilities.h - Utilities.h.htm</a><br><a href = "itokcollection.h.htm">itokcollection.h - itokcollection.h.htm</a><br><br><br>/////////////////////////////////////////////////////////////////////
//  Parser.cpp - Analyzes C++ language constructs                  //
//  ver 1.5                                                        //
//  Language:      Visual C++ 2008, SP1                            //
//  Platform:      Dell XPS 8900, Windows 10                       //
//  Application:   Prototype for CSE687 Pr1, Sp09, ...             //
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;string&gt;
#include "../Utilities/Utilities.h"
#include "../Tokenizer/Tokenizer.h"
#include "../SemiExp/SemiExp.h"
#include "Parser.h"
#include "ActionsAndRules.h"
#include "ConfigureParser.h"

using namespace CodeAnalysis;
using namespace Scanner;
using namespace Utilities;
using Demo = Logging::StaticLogger&lt;1&gt;;

//----&lt; register parsing rule &gt;--------------------------------

void Parser::addRule(IRule* pRule)
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
  rules.push_back(pRule);
}</div>
//----&lt; get next ITokCollection &gt;------------------------------

bool Parser::next() 
{<button onclick = "myFunc2()">+</button><div id = "mydiv2"> 
  bool succeeded = pTokColl-&gt;get();

  if (!succeeded)
  {<button onclick = "myFunc3()">+</button><div id = "mydiv3">
    return false;
  }</div>
  std::string debug = pTokColl-&gt;show();
  //GrammarHelper::showParseDemo("get SemiExp: ", *pTokColl);

  pTokColl-&gt;trim();

  return true;
}</div>

//----&lt; parse the SemiExp by applying all rules to it &gt;--------

bool Parser::parse()
{<button onclick = "myFunc4()">+</button><div id = "mydiv4">
  for (size_t i = 0; i&lt;rules.size(); ++i)
  {<button onclick = "myFunc5()">+</button><div id = "mydiv5">
    std::string debug = pTokColl-&gt;show();

    bool doWhat = rules[i]-&gt;doTest(pTokColl);
    if (doWhat == IRule::Stop)
      break;
  }</div>
  return true;
}</div>
//----&lt; register action with a rule &gt;--------------------------

void IRule::addAction(IAction *pAction)
{<button onclick = "myFunc6()">+</button><div id = "mydiv6">
  actions.push_back(pAction);
}</div>
//----&lt; invoke all actions associated with a rule &gt;------------

void IRule::doActions(const ITokCollection* pTokColl)
{<button onclick = "myFunc7()">+</button><div id = "mydiv7">
  if(actions.size() &gt; 0)
    for(size_t i=0; i&lt;actions.size(); ++i)
      actions[i]-&gt;doAction(pTokColl);
}</div>

//----&lt; test stub &gt;--------------------------------------------

#include "../FileSystem/FileSystem.h"

#ifdef TEST_PARSER

#include &lt;queue&gt;
#include &lt;string&gt;
#define Util StringHelper

int main(int argc, char* argv[])
{<button onclick = "myFunc8()">+</button><div id = "mydiv8">
  Util::Title("Testing Parser Class");
  putline();

  // collecting tokens from files, named on the command line

  if(argc &lt; 2)
  {<button onclick = "myFunc9()">+</button><div id = "mydiv9">
    std::cout 
      &lt;&lt; "\n  please enter name of file to process on command line\n\n";
    return 1;
  }</div>

  for(int i=1; i&lt;argc; ++i)
  {<button onclick = "myFunc10()">+</button><div id = "mydiv10">
    std::string fileSpec = FileSystem::Path::getFullFileSpec(argv[i]);
    std::string msg = "Processing file" + fileSpec;
    Util::title(msg);
    putline();

    ConfigParseForCodeAnal configure;
    Parser* pParser = configure.Build();
    try
    {<button onclick = "myFunc11()">+</button><div id = "mydiv11">
      if(pParser)
      {<button onclick = "myFunc12()">+</button><div id = "mydiv12">
        if(!configure.Attach(argv[i]))
        {<button onclick = "myFunc13()">+</button><div id = "mydiv13">
          std::cout &lt;&lt; "\n  could not open file " &lt;&lt; fileSpec &lt;&lt; std::endl;
          continue;
        }</div>
      }</div>
      else
      {<button onclick = "myFunc14()">+</button><div id = "mydiv14">
        std::cout &lt;&lt; "\n\n  Parser not built\n\n";
        return 1;
      }</div>
      // now that parser is built, use it

      while(pParser-&gt;next())
        pParser-&gt;parse();
      std::cout &lt;&lt; "\n";

      // show AST
      Repository* pRepo = Repository::getInstance();
      ASTNode* pGlobalScope = pRepo-&gt;getGlobalScope();
      TreeWalk(pGlobalScope);
    }</div>
    catch(std::exception& ex)
    {<button onclick = "myFunc15()">+</button><div id = "mydiv15">
      std::cout &lt;&lt; "\n\n    " &lt;&lt; ex.what() &lt;&lt; "\n\n";
    }</div>
  }</div>
  std::cout &lt;&lt; "\n";
}</div>

#endif

</pre></body></html>