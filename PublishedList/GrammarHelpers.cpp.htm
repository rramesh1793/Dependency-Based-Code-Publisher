<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "Cpp11-BlockingQueue.cpp.htm">Cpp11-BlockingQueue.cpp - Cpp11-BlockingQueue.cpp.htm</a><br><a href = "FileSystem.cpp.htm">FileSystem.cpp - FileSystem.cpp.htm</a><br><a href = "GrammarHelpers.cpp.htm">GrammarHelpers.cpp - GrammarHelpers.cpp.htm</a><br><a href = "GrammarHelpers.h.htm">GrammarHelpers.h - GrammarHelpers.h.htm</a><br><a href = "Logger.h.htm">Logger.h - Logger.h.htm</a><br><a href = "SemiExp.h.htm">SemiExp.h - SemiExp.h.htm</a><br><a href = "StrHelper.h.htm">StrHelper.h - StrHelper.h.htm</a><br><a href = "Utilities.h.htm">Utilities.h - Utilities.h.htm</a><br><a href = "itokcollection.h.htm">itokcollection.h - itokcollection.h.htm</a><br><br><br>/////////////////////////////////////////////////////////////////////////
// GrammarHelpers.cpp - Functions providing base grammatical analyses  //
// ver 1.3                                                             //
// Language:    C++, Visual Studio 2015                                //
// Application: Support for Parsing, CSE687 - Object Oriented Design   //
// Author:      Jim Fawcett, Syracuse University, CST 4-187            //
//              jfawcett@twcny.rr.com                                  //
/////////////////////////////////////////////////////////////////////////

#include "GrammarHelpers.h"
#include "../SemiExp/SemiExp.h"
#include "../Logger/Logger.h"
#include "../Utilities/Utilities.h"
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;sstream&gt;

using namespace CodeAnalysis;

//----&lt; is tok a control keyword for either C++ or C# ? &gt;------------

bool GrammarHelper::isControlKeyWord(const std::string& tok)
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
  const static size_t numKeys = 9;
  const static std::string keys[numKeys]
    = {<button onclick = "myFunc2()">+</button><div id = "mydiv2"> "for", "foreach", "do", "while", "switch", "if", "else", "try", "catch" }</div>;

  for (int i = 0; i &lt; numKeys; ++i)
  {<button onclick = "myFunc3()">+</button><div id = "mydiv3">
    if (tok == keys[i])
      return true;
  }</div>
  return false;
}</div>
//----&lt; does SemiExp contain at least one control keyword ? &gt;--------

bool GrammarHelper::hasControlKeyWord(const Scanner::ITokCollection& se)
{<button onclick = "myFunc4()">+</button><div id = "mydiv4">
  for (size_t i = 0; i &lt; se.length(); ++i)
  {<button onclick = "myFunc5()">+</button><div id = "mydiv5">
    if (GrammarHelper::isControlKeyWord(se[i]))
      return true;
  }</div>
  return false;
}</div>
//----&lt; is semiExp a function defin or declar ? &gt;--------------------

bool GrammarHelper::isFunction(const Scanner::ITokCollection& se)
{<button onclick = "myFunc6()">+</button><div id = "mydiv6">
  size_t len = se.find("(");
  if (0 &lt; len && len &lt; se.length() && !isControlKeyWord(se[len - 1]))
    return true;
  if (len == 0)
  {<button onclick = "myFunc7()">+</button><div id = "mydiv7">
    size_t posEquals = se.find("=");
    if (posEquals &lt; se.length() - 1 && se[posEquals + 1] == "&gt;")
    {<button onclick = "myFunc8()">+</button><div id = "mydiv8">
      // C# lambda
      return true;
    }</div>
  }</div>
  return false;
}</div>
//----&lt; has function and function has at least one argument &gt;--------

bool GrammarHelper::hasArgs(const Scanner::ITokCollection& se)
{<button onclick = "myFunc9()">+</button><div id = "mydiv9">
  if (!isFunction(se))
    return false;

  size_t posOpenParen = se.find("(");
  size_t posCloseParen = se.find(")");
  if (posOpenParen &lt; posCloseParen && posCloseParen &lt; se.length())
  {<button onclick = "myFunc10()">+</button><div id = "mydiv10">
    if (posCloseParen &gt; posOpenParen + 1)
      return true;
  }</div>
  return false;
}</div>
//----&lt; is semiExp a function defin or declar ? &gt;--------------------

bool GrammarHelper::isFunctionDefinition(const Scanner::ITokCollection& se)
{<button onclick = "myFunc11()">+</button><div id = "mydiv11">
  if (se.length() &gt; 0 && se[se.length() - 1] != "{<button onclick = "myFunc12()">+</button><div id = "mydiv12">")
    return false;

  if (isFunction(se))
    return true;
  
  return false;
}</div>
//----&lt; find last matching token in semiExp &gt;------------------------

size_t GrammarHelper::findLast(const Scanner::ITokCollection& se, const std::string& token)
{<button onclick = "myFunc13()">+</button><div id = "mydiv13">
  size_t endIndex = se.length() - 1;
  for (size_t i = 0; i &lt; se.length(); ++i)
  {<button onclick = "myFunc14()">+</button><div id = "mydiv14">
    std::string debugTok = se[endIndex - i];
    if (se[endIndex - i] == token)
      return endIndex - i;
  }</div>
  return se.length();
}</div>
//----&lt; is tok a type qualifier keyword ? &gt;--------------------------

bool GrammarHelper::isQualifierKeyWord(const std::string& tok)
{<button onclick = "myFunc15()">+</button><div id = "mydiv15">
  const size_t numKeys = 21;            // its declar else executable.
  const static std::string keys[numKeys] = {<button onclick = "myFunc16()">+</button><div id = "mydiv16">
    "const", "extern", "friend", "mutable", "signed", "static", "abstract", 
    "typedef", "typename", "unsigned", "volatile", "&", "*", /*"std",*/ /*"::",*/
    "public", "protected", "private", ":", "typename", "typedef", "++", "--"
  }</div>;
  for (int i = 0; i &lt; numKeys; ++i)
    if (tok == keys[i])
      return true;
  return false;
}</div>
//----&lt; strip qualifier keywords from semiExp &gt;----------------------

void GrammarHelper::removeQualifiers(Scanner::ITokCollection& tc)
{<button onclick = "myFunc17()">+</button><div id = "mydiv17">
  size_t i = 0;
  while (i &lt; tc.length())
  {<button onclick = "myFunc18()">+</button><div id = "mydiv18">
    if (isQualifierKeyWord(tc[i]))
      tc.remove(i);
    else
      ++i;
  }</div>
}</div>
//----&lt; remove calling argument qualifiers after first paren &gt;-------

void GrammarHelper::removeCallingArgQualifiers(Scanner::ITokCollection& tc)
{<button onclick = "myFunc19()">+</button><div id = "mydiv19">
  std::string debug = tc.show();

  size_t begin = tc.find("(");
  size_t end = tc.find(")");
  if (begin == tc.length() || end == tc.length() || begin &gt;= end)
    return;
  size_t i = begin + 1;
  while (true)
  {<button onclick = "myFunc20()">+</button><div id = "mydiv20">
    if (isQualifierKeyWord(tc[i]))
      tc.remove(tc[i]);
    if (tc[i] == ")")
      break;
    ++i;
  }</div>
}</div>
//----&lt; is token a scope connector ? &gt;-------------------------------

bool isScopeConnector(const std::string& tok)
{<button onclick = "myFunc21()">+</button><div id = "mydiv21">
  if (tok == "::" || tok == ".")
    return true;
  return false;
}</div>
//----&lt; is first function argument a declaration ? &gt;-----------------

bool GrammarHelper::isFirstArgDeclaration(const Scanner::ITokCollection& tc, const std::string& parentType)
{<button onclick = "myFunc22()">+</button><div id = "mydiv22">
  if(!isFunction(tc))
    return false;  // not a function

  if (parentType == "function")
    return false;  // functions don't declare other functions

  Scanner::SemiExp se;
  se.clone(tc);

  removeCallingArgQualifiers(se);

  size_t posOpenParen = se.find("(");
  size_t posComma = se.find(",");
  size_t posEqual = se.find("=");
  size_t posCloseParen = se.find(")");
  
  // must have two adjacent terms without connector, e.g., type and name

  size_t posEnd = (posComma &lt; posEqual) ? posComma : posEqual;
  posEnd = (posEnd &lt; posCloseParen) ? posEnd : posCloseParen;

  // Note:
  // - This set of cases works correctly only if name is included in
  //   declaration, but that is not required by either C++ or C#.
  // - An example of the problem is X(tok);  If tok is a
  //   type then this is a constructor function declaration, otherwise
  //   it is a function invocation with named parameter tok.
  // - To fix this we would need to know all defined types, both
  //   those defined by our code and also by all the libraries used.
  // - for most analysis applications we do not need a completely
  //   reliable function declaration detector

  size_t numArgTerms = posEnd - posOpenParen - 1;
  switch (numArgTerms)
  {<button onclick = "myFunc23()">+</button><div id = "mydiv23">
  case 1:
    // must be executable
    return false;
    break;
  case 2:
    // type name
    return true;
    break;
  case 4:
    // namespace :: type name
    return true;
    break;
  default:
    // not an argument declaration
    break;
  }</div>
  return false;
}</div>
//----&lt; is this a function declaration ? &gt;---------------------------

bool GrammarHelper::isFunctionDeclaration(const Scanner::ITokCollection& tc, const std::string& parentType)
{<button onclick = "myFunc24()">+</button><div id = "mydiv24">
  std::string debug = tc.show();

  if (tc.length() == 0)
    return false;

  if (tc.length() == 1)  // ; or {<button onclick = "myFunc25()">+</button><div id = "mydiv25">
    return false;

  if (tc[tc.length() - 1] != ";")
    return false;

  std::string tok = tc[tc.length() - 2];
  if (tok == "delete" || tok == "default")
    return true;

  if (parentType == "function")
    return false;

  if (!isFunction(tc))
    return false;

  if (tc.find("operator") &lt; tc.length())
    return true;

  Scanner::SemiExp se;
  se.clone(tc);

  if (isFirstArgDeclaration(se, parentType) || !hasArgs(se))
    return true;

  return false;
}</div>
//----&lt; is this a function invocation ? &gt;----------------------------
/*
*  will return false unless invocation uses first paren in SemiExp
*/
bool GrammarHelper::isFunctionInvocation(const Scanner::ITokCollection& tc, const std::string& parentType)
{<button onclick = "myFunc26()">+</button><div id = "mydiv26">
  if (tc.length() == 1)  // ; or {<button onclick = "myFunc27()">+</button><div id = "mydiv27">
    return false;

  if (parentType != "function")
    return false;

  if (isFunction(tc) && !isFunctionDeclaration(tc, parentType) && !isFunctionDefinition(tc))
    return true;
  
  return false;
}</div>
//----&lt; has function invocation somewhere in expression ? &gt;----------

bool GrammarHelper::hasFunctionInvocation(const Scanner::ITokCollection& tc, const std::string& parentType)
{<button onclick = "myFunc28()">+</button><div id = "mydiv28">
  if (tc.length() == 1)  // ; or {<button onclick = "myFunc29()">+</button><div id = "mydiv29">
    return false;

  if (tc.length() &gt; 0 && tc[tc.length() - 1] == "{<button onclick = "myFunc30()">+</button><div id = "mydiv30">")
    return false;

  if (parentType != "function")
    return false;

  size_t posParen = tc.find("(");
  Scanner::SemiExp test;
  test.clone(tc, posParen - 1);
  std::string debug = test.show();
  while (true)
  {<button onclick = "myFunc31()">+</button><div id = "mydiv31">
    if (isFunctionInvocation(test, parentType))
      return true;
    posParen = test.find("(", posParen + 1);
    if (posParen == test.length())
      return false;
    Scanner::SemiExp innerTest;
    innerTest.clone(test, posParen - 1);
    test = innerTest;
    std::string debug = test.show();
  }</div>
  return false;
}</div>
//----&lt; is this a data declaration ? &gt;-------------------------------

bool GrammarHelper::isDataDeclaration(const Scanner::ITokCollection& tc)
{<button onclick = "myFunc32()">+</button><div id = "mydiv32">
  std::string debug3 = tc.show();

  if (tc.length() == 1)  // ; or {<button onclick = "myFunc33()">+</button><div id = "mydiv33">
    return false;

  if (tc.length() &gt; 0 && tc[tc.length() - 1] != ";")
    return false;

  if (tc.length() &gt; 0 && (tc[0] == "~" || tc[0] == "return"))
    return false;

  if(hasControlKeyWord(tc))
    return false;

  if (tc.find("&lt;&lt;") &lt; tc.length() || tc.find("&gt;&gt;") &lt; tc.length())
    return false;

  std::string debug = tc.show();

  Scanner::SemiExp se;
  se.clone(tc);
  condenseTemplateTypes(se);
  removeQualifiers(se);
  removeCppInitializers(se);
  
  // is this a function declaration ?

  size_t posParen = se.find("(");
  if (posParen &lt; se.length() && (posParen == 2 || posParen == 3))
    return false;

  removeFunctionArgs(se);
  
  // is stripped tc of the form "type name ;" or "namespace :: type name ;"

  std::string debug2 = se.show();

  if (se.length() == 3)
    return true;
  if (se.length() == 5 && se[1] == "::")
    return true;

  return false;
}</div>
//----&lt; is this an executable statement ? &gt;--------------------------

bool GrammarHelper::isExecutable(const Scanner::ITokCollection& tc, const std::string& parentType)
{<button onclick = "myFunc34()">+</button><div id = "mydiv34">
  if (tc.length() == 1)  // ; or {<button onclick = "myFunc35()">+</button><div id = "mydiv35">
    return false;

  if (isFunctionDefinition(tc))
    return false;
  if (isFunctionDeclaration(tc, parentType))
    return false;
  if (isDataDeclaration(tc))
    return false;
  return true;
}</div>
//----&lt; remove initializers from C++ semiExp &gt;-----------------------

void GrammarHelper::removeCppInitializers(Scanner::ITokCollection& tc)
{<button onclick = "myFunc36()">+</button><div id = "mydiv36">
  std::string debug = tc.show();
  for (size_t i = 0; i &lt; tc.length(); ++i)
  {<button onclick = "myFunc37()">+</button><div id = "mydiv37">
    if (tc[i] == "=" || tc[i] == "{<button onclick = "myFunc38()">+</button><div id = "mydiv38">")
    {<button onclick = "myFunc39()">+</button><div id = "mydiv39">
      size_t j = i;
      while (j &lt; tc.length() && tc[j] != ";")
      {<button onclick = "myFunc40()">+</button><div id = "mydiv40">
        tc.remove(j);
      }</div>
      break;
    }</div>
  }</div>
  if (tc.length() &gt; 0 && tc[tc.length() - 1] != ";")
    tc.push_back(";");
}</div>
//----&lt; remove initializers from C# semiExp &gt;------------------------

void GrammarHelper::removeCSharpInitializers(Scanner::ITokCollection& tc)
{<button onclick = "myFunc41()">+</button><div id = "mydiv41">
  std::string debug = tc.show();
  for (size_t i = 0; i &lt; tc.length(); ++i)
  {<button onclick = "myFunc42()">+</button><div id = "mydiv42">
    if (tc[i] == "=")
    {<button onclick = "myFunc43()">+</button><div id = "mydiv43">
      size_t j = i;
      while (j &lt; tc.length() && tc[j] != ";")
      {<button onclick = "myFunc44()">+</button><div id = "mydiv44">
        tc.remove(j);
      }</div>
      break;
    }</div>
  }</div>
  if (tc.length() &gt; 0 && tc[tc.length() - 1] != ";")
    tc.push_back(";");
}</div>
//----&lt; remove comments from semiExp &gt;-------------------------------

void GrammarHelper::removeComments(Scanner::ITokCollection& tc)
{<button onclick = "myFunc45()">+</button><div id = "mydiv45">
  size_t i = 0;
  while (true)
  {<button onclick = "myFunc46()">+</button><div id = "mydiv46">
    if (tc.isComment(tc[i]))
      tc.remove(i);
    if (++i == tc.length())
      break;
  }</div>
}</div>
//----&lt; condense template spec to single token &gt;---------------------

void GrammarHelper::condenseTemplateTypes(Scanner::ITokCollection& tc)
{<button onclick = "myFunc47()">+</button><div id = "mydiv47">
  size_t start = tc.find("&lt;");
  size_t end = tc.find("&gt;");
  if (start &gt;= end || start == 0)
    return;
  else
  {<button onclick = "myFunc48()">+</button><div id = "mydiv48">
    if (end == tc.length())
      end = tc.find("&gt;::");
    if (end == tc.length())
      return;
  }</div>
  std::string save = tc[end];
  std::string tok = tc[start - 1];
  for (size_t i = start; i &lt; end + 1; ++i)
  {<button onclick = "myFunc49()">+</button><div id = "mydiv49">
    tok += tc[i];
    if (tc[i] == "typename" || tc[i] == "class")
      tok += " ";
  }</div>
  for (size_t i = start; i &lt; end + 1; ++i)
    tc.remove(start);
  if (save == "&gt;::")
  {<button onclick = "myFunc50()">+</button><div id = "mydiv50">
    tok += tc[start + 1];
    tc.remove(start);
  }</div>
  tc[start - 1] = tok;
  //std::cout &lt;&lt; "\n  -- " &lt;&lt; tc.show();
}</div>
//----&lt; remove function's formal arguments &gt;-------------------------

void GrammarHelper::removeFunctionArgs(Scanner::ITokCollection& tc)
{<button onclick = "myFunc51()">+</button><div id = "mydiv51">
  std::string debug = tc.show();

  size_t start = tc.find("(");
  size_t end = tc.find(")");
  if (start &gt;= end || end == tc.length() || start == 0)
    return;
  if (GrammarHelper::isControlKeyWord(tc[start - 1]))
    return;
  for (size_t i = start; i &lt; end + 1; ++i)
    tc.remove(start);
  //std::cout &lt;&lt; "\n  -- " &lt;&lt; tc.show();
}</div>
//----&lt; show semiExp with Dbug logger &gt;------------------------------

void GrammarHelper::showParse(const std::string& msg, const Scanner::ITokCollection& se)
{<button onclick = "myFunc52()">+</button><div id = "mydiv52">
  using Dbug = Logging::StaticLogger&lt;2&gt;;
  if (Dbug::running())
  {<button onclick = "myFunc53()">+</button><div id = "mydiv53">
    std::ostringstream out;
    out &lt;&lt; "\n  " &lt;&lt; std::left &lt;&lt; std::setw(15) &lt;&lt; msg &lt;&lt; ": ";
    std::string temp = se.show();
    if (temp.size() &gt; 80)
      out &lt;&lt; "\n    ";
    out &lt;&lt; temp;
    Dbug::write(out.str());
  }</div>
}</div>

void GrammarHelper::showParseDemo(const std::string& msg, const Scanner::ITokCollection& se)
{<button onclick = "myFunc54()">+</button><div id = "mydiv54">
  using Demo = Logging::StaticLogger&lt;1&gt;;
  if (Demo::running())
  {<button onclick = "myFunc55()">+</button><div id = "mydiv55">
    std::ostringstream out;
    out &lt;&lt; "\n  " &lt;&lt; std::left &lt;&lt; std::setw(32) &lt;&lt; msg &lt;&lt; ": ";
    std::string temp = se.show();
    if (temp.size() &gt; 80)
      out &lt;&lt; "\n    ";
    out &lt;&lt; temp;
    Demo::write(out.str());
  }</div>
}</div>

#ifdef TEST_GRAMMARHELPERS

#include &lt;vector&gt;
#include &lt;iostream&gt;
#include "../SemiExp/SemiExp.h"
#include "../Utilities/Utilities.h"

using namespace Scanner;
using Token = std::string;
using Toks = std::vector&lt;Token&gt;;

void load(const Toks& toks, SemiExp& se)
{<button onclick = "myFunc56()">+</button><div id = "mydiv56">
  se.clear();
  for (auto item : toks)
    se.push_back(item);
}</div>

std::string showQualifiers(const SemiExp& se)
{<button onclick = "myFunc57()">+</button><div id = "mydiv57">
  std::string temp;
  for (size_t i = 0; i &lt; se.length(); ++i)
    if (GrammarHelper::isQualifierKeyWord(se[i]))
      temp += se[i] + " ";
  return temp;
}</div>

void showPredicate(bool predicate, const std::string& msg)
{<button onclick = "myFunc58()">+</button><div id = "mydiv58">
  if (predicate)
    std::cout &lt;&lt; "\n    " &lt;&lt; msg;
  else
    std::cout &lt;&lt; "\n    not " &lt;&lt; msg;
}</div>

std::string show(const ITokCollection& se)
{<button onclick = "myFunc59()">+</button><div id = "mydiv59">
  std::string temp;
  for (size_t i = 0; i &lt; se.length(); ++i)
    temp += se[i] + " ";
  return temp;
}</div>

void test(const SemiExp& seIn)
{<button onclick = "myFunc60()">+</button><div id = "mydiv60">
  Scanner::SemiExp se;
  se.clone(seIn);

  Utilities::StringHelper::title("Testing GrammarHelpers");
  std::cout &lt;&lt; "\n  " &lt;&lt; show(se);
  se.trim();
  std::cout &lt;&lt; "\n    removing comments:  " &lt;&lt; show(se);
  std::cout &lt;&lt; "\n    index of last \"(\" is " &lt;&lt; GrammarHelper::findLast(seIn, "(");
  std::cout &lt;&lt; "\n    qualifier keywords are: " &lt;&lt; showQualifiers(seIn);

  std::string debug = se.show();
  showPredicate(GrammarHelper::isFunctionDefinition(se), "function definition");

  std::string parentType = "function";
  std::cout &lt;&lt; "\n  parent type = " &lt;&lt; parentType;
  showPredicate(GrammarHelper::isFunctionDeclaration(se, parentType), "function declaration");
  showPredicate(GrammarHelper::isFunctionInvocation(se, parentType), "function invocation");
  showPredicate(GrammarHelper::hasFunctionInvocation(se, parentType), "has function invocation");
  parentType = "class";
  std::cout &lt;&lt; "\n  parent type = " &lt;&lt; parentType;
  showPredicate(GrammarHelper::isFunctionDeclaration(se, parentType), "function declaration");
  showPredicate(GrammarHelper::isFunctionInvocation(se, parentType), "function invocation");
  showPredicate(GrammarHelper::hasFunctionInvocation(se, parentType), "has function invocation");

  showPredicate(GrammarHelper::isDataDeclaration(se), "data declaration");
  showPredicate(GrammarHelper::hasControlKeyWord(se), "found control Keyword");

  SemiExp testSE;
  testSE.clone(seIn);
  GrammarHelper::condenseTemplateTypes(testSE);
  std::cout &lt;&lt; "\n    condensing template types: " &lt;&lt; show(testSE);

  testSE.clone(seIn);
  GrammarHelper::removeQualifiers(testSE);
  std::cout &lt;&lt; "\n    removing qualifiers: " &lt;&lt; show(testSE);

  testSE.clone(seIn);
  GrammarHelper::removeCppInitializers(testSE);
  std::cout &lt;&lt; "\n    removing C++ initializers: " &lt;&lt; show(testSE);

  testSE.clone(seIn);
  GrammarHelper::removeFunctionArgs(testSE);
  std::cout &lt;&lt; "\n    removing function args: " &lt;&lt; show(testSE);

  testSE.clone(seIn);
  GrammarHelper::removeCallingArgQualifiers(testSE);
  std::cout &lt;&lt; "\n    removing qualifiers in function calling sequence: " &lt;&lt; show(testSE);
  std::cout &lt;&lt; "\n";
}</div> 
int main()
{<button onclick = "myFunc61()">+</button><div id = "mydiv61">
  Utilities::StringHelper::Title("Testing Grammar Functions");
  std::cout &lt;&lt; "\n  Note:";
  std::cout &lt;&lt; "\n  - Test functions are applied to SemiExps that they should change and those they should not.";
  std::cout &lt;&lt; "\n  - The intent is to make sure they do what they are supposed to do without harming SemiExps";
  std::cout &lt;&lt; "\n  - that should not change.\n";

  Toks tokset0 = {<button onclick = "myFunc62()">+</button><div id = "mydiv62"> "/* Test0 */", ";" }</div>;
  Toks tokset1 = {<button onclick = "myFunc63()">+</button><div id = "mydiv63"> "/* Test1 */", "extern", "int", "x", "[", "2", "]", "=", "{<button onclick = "myFunc64()">+</button><div id = "mydiv64">", "1", ",", "2", "}</div>", ";" }</div>;
  Toks tokset2 = {<button onclick = "myFunc65()">+</button><div id = "mydiv65"> "/* Test2 */", "extern", "int", "x", "[", "2", "]", "{<button onclick = "myFunc66()">+</button><div id = "mydiv66">", "1", ",", "2", "}</div>", ";" }</div>;
  Toks tokset3 = {<button onclick = "myFunc67()">+</button><div id = "mydiv67"> "/* Test3 */", "if", "(", "x", "==", "y", ")", "doThing", "(", "3", ")", ";" }</div>;
  Toks tokset4 = {<button onclick = "myFunc68()">+</button><div id = "mydiv68"> "/* Test4 */", "void", "fun", "(", "int", "anInteger", ")", "{<button onclick = "myFunc69()">+</button><div id = "mydiv69">" }</div>;
  Toks tokset5 = {<button onclick = "myFunc70()">+</button><div id = "mydiv70"> "/* Test5 */", "void", "fun", "(", "int", "anInteger", ")", ";" }</div>;
  Toks tokset6 = {<button onclick = "myFunc71()">+</button><div id = "mydiv71"> "/* Test6 */", "int", "fun", "(", "const", "int", "&", "anItegerRef", ")", ";" }</div>;
  Toks tokset7 = {<button onclick = "myFunc72()">+</button><div id = "mydiv72"> "/* Test7 */", "template", "&lt;", "typename", "C", "&gt;", "class", "A", "{<button onclick = "myFunc73()">+</button><div id = "mydiv73">" }</div>;
  Toks tokset8 = {<button onclick = "myFunc74()">+</button><div id = "mydiv74"> "/* Test7 */", "template", "&lt;", "typename", "C", "&gt;", "void", "fun", "(", "const", "C", "&", "c", ")", "{<button onclick = "myFunc75()">+</button><div id = "mydiv75">" }</div>;
  Toks tokset9 = {<button onclick = "myFunc76()">+</button><div id = "mydiv76"> "/* Test9 */", "std", "::","vector", "&lt;", "std", "::", "string", "&gt;", "aVec", ";" }</div>;
  Toks tokset10 = {<button onclick = "myFunc77()">+</button><div id = "mydiv77"> "/* Test10 */", "ClassName", "(", ")", ";" }</div>;
  Toks tokset11 = {<button onclick = "myFunc78()">+</button><div id = "mydiv78"> "/* Test11 */", "~", "ClassName", "(", ")", ";" }</div>;
  Toks tokset12 = {<button onclick = "myFunc79()">+</button><div id = "mydiv79"> "/* Test12 */", "ClassName", "(", "int", "count", ")", ";" }</div>;
  Toks tokset13 = {<button onclick = "myFunc80()">+</button><div id = "mydiv80"> "/* Test13 */", "ClassName", "(", "int", "count", ")", ":", "count_", "(", "count", ")", "{<button onclick = "myFunc81()">+</button><div id = "mydiv81">" }</div>;
  Toks tokset14 = {<button onclick = "myFunc82()">+</button><div id = "mydiv82"> "/* Test14 */", "Scanner", "::", "SemiExp", "se", "(", "nullPtr", ")", ";" }</div>;
  Toks tokset15 = {<button onclick = "myFunc83()">+</button><div id = "mydiv83"> "/* Test15 */", "public", "abstract", "void", "doAction", "(", "CSemi", ".", "CSemiExp", "semi", ")", ";" }</div>;

  Scanner::SemiExp se;

  load(tokset0, se);
  test(se);
  load(tokset1, se);
  test(se);
  load(tokset2, se);
  test(se);
  load(tokset3, se);
  test(se);
  load(tokset4, se);
  test(se);
  load(tokset5, se);
  test(se);
  load(tokset6, se);
  test(se);
  load(tokset7, se);
  test(se);
  load(tokset8, se);
  test(se);
  load(tokset9, se);
  test(se);
  load(tokset10, se);
  test(se);
  load(tokset11, se);
  test(se);
  load(tokset12, se);
  test(se);
  load(tokset13, se);
  test(se);
  load(tokset14, se);
  test(se);
  load(tokset15, se);
  test(se);
}</div>
#endif



</pre></body></html>