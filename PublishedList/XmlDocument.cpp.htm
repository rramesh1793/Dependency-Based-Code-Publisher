<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "FileSystem.cpp.htm">FileSystem.cpp - FileSystem.cpp.htm</a><br><a href = "ScopeStack.cpp.htm">ScopeStack.cpp - ScopeStack.cpp.htm</a><br><a href = "Test1.cpp.htm">Test1.cpp - Test1.cpp.htm</a><br><a href = "XmlDocument.cpp.htm">XmlDocument.cpp - XmlDocument.cpp.htm</a><br><a href = "XmlDocument.h.htm">XmlDocument.h - XmlDocument.h.htm</a><br><a href = "XmlElement.cpp.htm">XmlElement.cpp - XmlElement.cpp.htm</a><br><a href = "XmlElement.h.htm">XmlElement.h - XmlElement.h.htm</a><br><a href = "XmlParser.h.htm">XmlParser.h - XmlParser.h.htm</a><br><br><br>///////////////////////////////////////////////////////////////////
// XmlDocument.cpp - a container of XmlElement nodes             //
// Ver 2.2                                                       //
// Application: Help for CSE687 Pr#2, Spring 2015                //
// Platform:    Dell XPS 2720, Win 8.1 Pro, Visual Studio 2013   //
// Author:      Jim Fawcett, CST 4-187, 443-3948                 //
//              jfawcett@twcny.rr.com                            //
///////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;functional&gt;
#include "XmlDocument.h"
//#include "..\XmlParser\XmlParser.h"
#include "../Utilities/Utilities.h"
#include "../XmlParser/XmlParser.h"



using namespace XmlProcessing;
using sPtr = std::shared_ptr &lt; AbstractXmlElement &gt; ;

/////////////////////////////////////////////////////////////////////////////
// Definitions of XmlDocument methods

XmlProcessing::XmlDocument::XmlDocument(const std::string& src, sourceType srcType)
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
  XmlParser parser(src, (XmlParser::sourceType) srcType);
  XmlDocument* pDoc = parser.buildDocument();
  *this = std::move(*pDoc);
}</div>
//----&lt; move constructor &gt;---------------------------------------------------

XmlDocument::XmlDocument(XmlDocument&& doc)
{<button onclick = "myFunc2()">+</button><div id = "mydiv2">
  pDocElement_ = doc.pDocElement_;
  doc.pDocElement_ = nullptr;
}</div>
//----&lt; move assignment &gt;----------------------------------------------------

XmlDocument& XmlDocument::operator=(XmlDocument&& doc)
{<button onclick = "myFunc3()">+</button><div id = "mydiv3">
  if (&doc == this) return *this;
  pDocElement_ = doc.pDocElement_;
  doc.pDocElement_ = nullptr;
  return *this;
}</div>
//----&lt; return std::shared_ptr to XML root &gt;---------------------------------

sPtr XmlDocument::xmlRoot()
{<button onclick = "myFunc4()">+</button><div id = "mydiv4">
  for (auto pElem : pDocElement_-&gt;children())
  {<button onclick = "myFunc5()">+</button><div id = "mydiv5">
    if (dynamic_cast&lt;TaggedElement*&gt;(pElem.get()))
      return pElem;
  }</div>
  return nullptr;
}</div>
//----&lt; add XML root to an XmlDocument &gt;-------------------------------------

bool XmlDocument::xmlRoot(sPtr pRoot)
{<button onclick = "myFunc6()">+</button><div id = "mydiv6">
  return pDocElement_-&gt;addChild(pRoot);
}</div>
//----&lt; find element(s) with this tag &gt;--------------------------------------
/*
 *  if tag == "" returns pElem and all decendents */
 

bool XmlDocument::find(const std::string& tag, sPtr pElem, bool findall)
{<button onclick = "myFunc7()">+</button><div id = "mydiv7">
  if (pElem-&gt;tag() == tag || tag == "")
  {<button onclick = "myFunc8()">+</button><div id = "mydiv8">
    found_.push_back(pElem);
    if (!findall)
      return true;
  }</div>
  for (auto pChild : pElem-&gt;children())
    find(tag, pChild);
  return (found_.size() &gt; 0);
}</div>
//----&lt; find element with this tag &gt;----------------------------------------- */

 
XmlDocument& XmlDocument::element(const std::string& tag)
{<button onclick = "myFunc9()">+</button><div id = "mydiv9">
  found_.clear();
  find(tag, pDocElement_, false);
  return *this;
}</div>
//----&lt; find children of element with this tag &gt;-----------------------------

 
XmlDocument& XmlDocument::elements(const std::string& tag)
{<button onclick = "myFunc10()">+</button><div id = "mydiv10">
  found_.clear();
  element(tag);
  if (found_.size() &gt; 0)
  {<button onclick = "myFunc11()">+</button><div id = "mydiv11">
    sPtr pElem = found_[0];
    found_.clear();                         // don't keep parent element
    for (auto pChild : pElem-&gt;children())
      found_.push_back(pChild);             // save children
  }</div>
  return *this;
}</div>
//----&lt; find all decendents of last find with this tag &gt;---------------------

 
XmlDocument& XmlDocument::descendents(const std::string& tag)
{<button onclick = "myFunc12()">+</button><div id = "mydiv12">
  if (found_.size() == 0)
    found_.push_back(xmlRoot());
  sPtr pElem = found_[0];
  found_.clear();
  for (auto pChild : pElem-&gt;children())
    find(tag, pChild, true);
  return *this;
}</div>
//----&lt; return found results &gt;-----------------------------------------------

std::vector&lt;sPtr&gt; XmlDocument::select()
{<button onclick = "myFunc13()">+</button><div id = "mydiv13">
  return std::move(found_);  // returns results and clears found_
}</div>
//----&lt; return the number of elements in the document &gt;----------------------

size_t XmlDocument::size()
{<button onclick = "myFunc14()">+</button><div id = "mydiv14">
  find("", pDocElement_, true);
  size_t size_ = found_.size() - 1;  // don't count docElement
  found_.clear();
  return size_;
}</div>
//----&lt; return XML string representation of XmlDocument &gt;--------------------

std::string XmlDocument::toString()
{<button onclick = "myFunc15()">+</button><div id = "mydiv15">
  return pDocElement_-&gt;toString();
}</div>

std::string enQuote(std::string s) {<button onclick = "myFunc16()">+</button><div id = "mydiv16"> return "\"" + s + "\""; }</div>



#ifdef TEST_XMLDOCUMENT

/////////////////////////////////////////////////////////////////////////////
// Test Functions

//----&lt; build an XmlDocument for testing &gt;-----------------------------------

XmlDocument buildDocument()
{<button onclick = "myFunc17()">+</button><div id = "mydiv17">
  sPtr pRoot = makeTaggedElement("root");
  XmlDocument doc(XmlProcessing::makeDocElement(pRoot));

  sPtr child1 = makeTaggedElement("child1");
  child1-&gt;addChild(makeTextElement("child1 text"));
  sPtr grandChild11 = makeTaggedElement("grandChild11");
  grandChild11-&gt;addChild(makeTextElement("grandchild11 text"));
  child1-&gt;addChild(grandChild11);
  pRoot-&gt;addChild(child1);
  sPtr secondChild1 = makeTaggedElement("child1");
  secondChild1-&gt;addChild(makeTextElement("text of second child1"));
  child1-&gt;addChild(secondChild1);

  sPtr child2 = makeTaggedElement("child2");
  child2-&gt;addChild(makeTextElement("child2 text"));
  pRoot-&gt;addChild(child2);
  return doc;
}</div>
//----&lt; test Depth First Search on XmlDocument &gt;-----------------------------

void testDFS(XmlDocument& doc)
{<button onclick = "myFunc18()">+</button><div id = "mydiv18">
  title("testing global DFS on XmlDocument - printing tags");

  std::function&lt;void(AbstractXmlElement&)&gt; f;
  f = [](AbstractXmlElement& Elem) {<button onclick = "myFunc19()">+</button><div id = "mydiv19">
    if (Elem.tag().size() &gt; 0)
      std::cout &lt;&lt; "\n  " &lt;&lt; Elem.tag();
  }</div>;
  
  DFS(doc, f);
  std::cout &lt;&lt; "\n";
}</div>
//----&lt; test search for element with specified tag &gt;-------------------------

void testElement(XmlDocument& doc)
{<button onclick = "myFunc20()">+</button><div id = "mydiv20">
  std::string testTag = "child1";
  title("testing element(" + enQuote(testTag) + ")");
  std::vector&lt;sPtr&gt; found = doc.element(testTag).select();
  if (found.size() &gt; 0)
    std::cout &lt;&lt; "\n  found " &lt;&lt; found[0]-&gt;tag();
  else
    std::cout &lt;&lt; "\n  couldn't find " + enQuote(testTag);
  std::cout &lt;&lt; "\n";

  testTag = "foobar";
  title("testing element(" + enQuote(testTag) + ")");
  found = doc.element(testTag).select();
  if (found.size() &gt; 0)
    std::cout &lt;&lt; "\n  found " &lt;&lt; found[0]-&gt;tag();
  else
    std::cout &lt;&lt; "\n  couldn't find " + enQuote(testTag);
  std::cout &lt;&lt; "\n";
}</div>
//----&lt; test search for children of element with specified tag &gt;-------------

void testElements(XmlDocument& doc)
{<button onclick = "myFunc21()">+</button><div id = "mydiv21">
  std::string testTag = "child1";
  title("testing elements(" + enQuote(testTag) + ")");
  std::vector&lt;sPtr&gt; found = doc.elements(testTag).select();
  if (found.size() &gt; 0)
  {<button onclick = "myFunc22()">+</button><div id = "mydiv22">
    for (auto pElem : found)
    {<button onclick = "myFunc23()">+</button><div id = "mydiv23">
      if (pElem-&gt;tag() != "")
        std::cout &lt;&lt; "\n  found: " &lt;&lt; pElem-&gt;tag();
      else
        std::cout &lt;&lt; "\n  found: " &lt;&lt; pElem-&gt;value();
    }</div>
  }</div>
  else
    std::cout &lt;&lt; "\n  couldn't find child elements";
  std::cout &lt;&lt; "\n";
}</div>
//----&lt; test search for all decendents of xmlRoot with specified tag &gt;-------

void testDescendents(XmlDocument& doc)
{<button onclick = "myFunc24()">+</button><div id = "mydiv24">
  std::string testTag = "child1";
  title("testing doc.descendents(" + enQuote(testTag) + ")");
  std::vector&lt;sPtr&gt; found = doc.descendents(testTag).select();
  if (found.size() &gt; 0)
  {<button onclick = "myFunc25()">+</button><div id = "mydiv25">
    for (auto pElem : found)
    {<button onclick = "myFunc26()">+</button><div id = "mydiv26">
      if (pElem-&gt;tag() != "")
        std::cout &lt;&lt; "\n  found: " &lt;&lt; pElem-&gt;tag();
      else
        std::cout &lt;&lt; "\n  found: " &lt;&lt; pElem-&gt;value();
    }</div>
  }</div>
  else
    std::cout &lt;&lt; "\n  couldn't find descendent elements";
  std::cout &lt;&lt; "\n";
}</div>
//----&lt; test search for all decendents of specified element &gt;----------------

void testElementDescendents(XmlDocument& doc)
{<button onclick = "myFunc27()">+</button><div id = "mydiv27">
  std::string testTag = "child1";
  title("testing doc.element(" + testTag + ").descendents()");
  std::vector&lt;sPtr&gt; found = doc.element(testTag).descendents().select();
  if (found.size() &gt; 0)
  {<button onclick = "myFunc28()">+</button><div id = "mydiv28">
    for (auto pElem : found)
    {<button onclick = "myFunc29()">+</button><div id = "mydiv29">
      if (pElem-&gt;tag() != "")
        std::cout &lt;&lt; "\n  found: " &lt;&lt; pElem-&gt;tag();
      else
        std::cout &lt;&lt; "\n  found: " &lt;&lt; pElem-&gt;value();
    }</div>
  }</div>
  else
    std::cout &lt;&lt; "\n  couldn't find descendent elements";
  std::cout &lt;&lt; "\n";
}</div>
//----&lt; test stub &gt;----------------------------------------------------------




int main()
{<button onclick = "myFunc30()">+</button><div id = "mydiv30">
	std::cout &lt;&lt;"Hello";

	

  title("Testing XmlDocument class");
  
  XmlDocument doc = buildDocument();
  std::cout &lt;&lt; doc.toString();
  std::cout &lt;&lt; "\n";
  std::cout &lt;&lt; "\n  size of document = " &lt;&lt; doc.size() &lt;&lt; "\n";

  title("Testing XmlDocument::DFS - looking for tags");
  std::function&lt;void(AbstractXmlElement&)&gt; f;
  f = [](AbstractXmlElement& Elem) {<button onclick = "myFunc31()">+</button><div id = "mydiv31">
    if (Elem.tag().size() &gt; 0)
      std::cout &lt;&lt; "\n  " &lt;&lt; Elem.tag();
  }</div>;
  doc.DFS(doc.xmlRoot(), f);
  std::cout &lt;&lt; "\n";
   
  testDFS(doc);
  testElement(doc);
  testElements(doc);
  testDescendents(doc);
  testElementDescendents(doc);

  std::string path = "../XmlElementParts/LectureNote.xml";
  title("Attempting to build document from fileSpec: " + path);

  try
  {<button onclick = "myFunc32()">+</button><div id = "mydiv32">
    XmlDocument doc2(path, XmlDocument::file);
    std::cout &lt;&lt; doc2.toString();
  }</div>
  catch (std::exception& ex)
  {<button onclick = "myFunc33()">+</button><div id = "mydiv33">
    std::cout &lt;&lt; "\n\n  " &lt;&lt; ex.what();
  }</div>
  std::cout &lt;&lt; "\n\n";


  
}</div>

#endif

</pre></body></html>