<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "AbstrSynTree.h.htm">AbstrSynTree.h - AbstrSynTree.h.htm</a><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "FileSystem.h.htm">FileSystem.h - FileSystem.h.htm</a><br><a href = "GrammarHelpers.cpp.htm">GrammarHelpers.cpp - GrammarHelpers.cpp.htm</a><br><a href = "ScopeStack.h.htm">ScopeStack.h - ScopeStack.h.htm</a><br><a href = "itokcollection.h.htm">itokcollection.h - itokcollection.h.htm</a><br><br><br>#pragma once
/////////////////////////////////////////////////////////////////////
//  AbstrSynTree.h - Represents an Abstract Syntax Tree            //
//  ver 1.4                                                        //
//  Language:      Visual C++ 2015                                 //
//  Platform:      Dell XPS 8900, Windows 10                       //
//  Application:   Used to support parsing source code             //
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////
/*
  Package Operations:
  ==================
  This package defines an AbstrSynTree class and an ASTNode struct.  
  Those provides support for building Abstract Syntax Trees during 
  static source code analysis.

  Public Interface:
  =================
  AbstrSynTree ast(scopeStack);       // create instance, passing in ScopeStack
  ASTNode* pNode = ast.root();        // get or set root of AST
  ast.add(pNode);                     // add ASTNode to tree, linked to current scope
  ASTNode* pNode = ast.find(myType);  // retrieve ptr to ASTNode representing myType
  ast.pop();                          // close current scope by poping top of scopeStack

  Build Process:
  ==============
  Required files
  - AbstrSynTree.h, AbstrSynTree.cpp, Utilities.h, Utilities.cpp

  Build commands (either one)
  - devenv CodeAnalysis.sln
  - cl /EHsc /DTEST_ABSTRSYNTREE AbstrSynTree.cpp Utilities.cpp /link setargv.obj

  Maintenance History:
  ====================
  ver 1.4 : 26 Feb 2017
  - added parentType_ member to support better grammar analysis
  ver 1.3 : 29 Oct 2016
  - added throw in ScopeStack if pop or peek empty stack
  ver 1.2 : 28 Oct 2016
  - added test for interface in show() and Add(ASTNode*)
  ver 1.1 : 22 Aug 2016
  - added access type and declaration type enumerations
  - added processing to store access level in AST
  - added more prologue comments
  ver 1.0 : 05 Aug 2016
  - first release

*/

#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
#include &lt;unordered_map&gt;
#include &lt;functional&gt;
#include "../SemiExp/itokcollection.h"
#include "../ScopeStack/ScopeStack.h"

namespace CodeAnalysis
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
  enum Access 
  {<button onclick = "myFunc2()">+</button><div id = "mydiv2"> 
    publ, prot, priv 
  }</div>;

  enum DeclType 
  {<button onclick = "myFunc3()">+</button><div id = "mydiv3"> 
    dataDecl, functionDecl, lambdaDecl, usingDecl 
  }</div>;

  struct DeclarationNode
  {<button onclick = "myFunc4()">+</button><div id = "mydiv4">
    Scanner::ITokCollection* pTc = nullptr;
    Access access_;
    DeclType declType_;
    std::string package_;
    size_t line_;
  }</div>;

  struct ASTNode
  {<button onclick = "myFunc5()">+</button><div id = "mydiv5">
    using Type = std::string;
    using Name = std::string;
    using Package = std::string;
    using Path = std::string;

    ASTNode();
    ASTNode(const Type& type, const Name& name);
    ~ASTNode();
    Type type_;
    Type parentType_;
    Name name_;
    Package package_;
    Path path_;
    size_t startLineCount_;
    size_t endLineCount_;
    size_t complexity_;
    std::vector&lt;ASTNode*&gt; children_;
    std::vector&lt;DeclarationNode&gt; decl_;
    std::vector&lt;Scanner::ITokCollection*&gt; statements_;
    std::string show(bool details = false);
  }</div>;

  class AbstrSynTree
  {<button onclick = "myFunc6()">+</button><div id = "mydiv6">
  public:
    using ClassName = std::string;
    using TypeMap = std::unordered_map&lt;ClassName, ASTNode*&gt;;

    AbstrSynTree(ScopeStack&lt;ASTNode*&gt;& stack);
    ~AbstrSynTree();
    ASTNode*& root();
    void add(ASTNode* pNode);
    ASTNode* find(const ClassName& type);
    ASTNode* pop();
    TypeMap& typeMap();
  private:
    TypeMap typeMap_;
    ScopeStack&lt;ASTNode*&gt;& stack_;
    ASTNode* pGlobalNamespace_;
  }</div>;
  //----&lt; traverse AST and execute callobj on every node &gt;-------------

  template &lt;typename CallObj&gt;
  void ASTWalk(ASTNode* pItem, CallObj co)
  {<button onclick = "myFunc7()">+</button><div id = "mydiv7">
    static size_t indentLevel = 0;
    co(pItem, indentLevel);
    auto iter = pItem-&gt;children_.begin();
    ++indentLevel;
    while (iter != pItem-&gt;children_.end())
    {<button onclick = "myFunc8()">+</button><div id = "mydiv8">
      ASTWalk(*iter, co);
      ++iter;
    }</div>
    --indentLevel;
  }</div>
  //----&lt; traverse AST and execute callobj on every node &gt;-------------

  template &lt;typename CallObj&gt;
  void ASTWalkNoIndent(ASTNode* pItem, CallObj co)
  {<button onclick = "myFunc9()">+</button><div id = "mydiv9">
    co(pItem);
    auto iter = pItem-&gt;children_.begin();
    while (iter != pItem-&gt;children_.end())
    {<button onclick = "myFunc10()">+</button><div id = "mydiv10">
      ASTWalkNoIndent(*iter, co);
      ++iter;
    }</div>
  }</div>
  //----&lt; compute complexities for each ASTNode &gt;--------------------

  inline void complexityWalk(ASTNode* pItem, size_t& count)
  {<button onclick = "myFunc11()">+</button><div id = "mydiv11">
    size_t inCount = ++count;
    auto iter = pItem-&gt;children_.begin();
    while (iter != pItem-&gt;children_.end())
    {<button onclick = "myFunc12()">+</button><div id = "mydiv12">
      complexityWalk(*iter, count);
      ++iter;
    }</div>
    pItem-&gt;complexity_ = count - inCount + 1;
  }</div>
  //----&lt; compute complexities for each ASTNode &gt;--------------------

  inline void complexityEval(ASTNode* pNode)
  {<button onclick = "myFunc13()">+</button><div id = "mydiv13">
    size_t initialCount = 0;
    complexityWalk(pNode, initialCount);
  }</div>
}</div>

struct foobar {<button onclick = "myFunc14()">+</button><div id = "mydiv14">

}</div>;

</pre></body></html>