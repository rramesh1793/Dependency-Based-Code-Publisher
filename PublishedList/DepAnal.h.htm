<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><br><br>#pragma once
/////////////////////////////////////////////////////////////////////////
// DepAnal.h - Demonstrate how to start developing Depanal analyzer //
//                                                                     //
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017           //
/////////////////////////////////////////////////////////////////////////
/*
 * You need to provide all the manual and maintenance informnation
 */


/*
//#include "../Parser/ActionsAndRules.h"
#include &lt;iostream&gt;
#include &lt;functional&gt;

#pragma warning (disable : 4101)  // disable warning re unused variable x, below



namespace CodeAnalysis
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
  class TypeAnal
  {<button onclick = "myFunc2()">+</button><div id = "mydiv2">
  public:
    using SPtr = std::shared_ptr&lt;ASTNode*&gt;;

    TypeAnal();
    void doTypeAnal();
  private:
    void DFS(ASTNode* pNode);
    AbstrSynTree& ASTref_;
    ScopeStack&lt;ASTNode*&gt; scopeStack_;
    Scanner::Toker& toker_;
  }</div>;

  inline TypeAnal::TypeAnal() : 
    ASTref_(Repository::getInstance()-&gt;AST()),
    scopeStack_(Repository::getInstance()-&gt;scopeStack()),
    toker_(*(Repository::getInstance()-&gt;Toker()))
  {<button onclick = "myFunc3()">+</button><div id = "mydiv3">
    std::function&lt;void()&gt; test = [] {<button onclick = "myFunc4()">+</button><div id = "mydiv4"> int x; }</div>;  // This is here to test detection of lambdas.
  }</div>                                              // It doesn't do anything useful for dep anal.

  inline bool doDisplay(ASTNode* pNode)
  {<button onclick = "myFunc5()">+</button><div id = "mydiv5">
    static std::string toDisplay[] = {<button onclick = "myFunc6()">+</button><div id = "mydiv6">
      "function", "lambda", "class", "struct", "enum", "alias", "typedef"
    }</div>;
    for (std::string type : toDisplay)
    {<button onclick = "myFunc7()">+</button><div id = "mydiv7">
      if (pNode-&gt;type_ == type)
        return true;
    }</div>
    return false;
  }</div>
  inline void TypeAnal::DFS(ASTNode* pNode)
  {<button onclick = "myFunc8()">+</button><div id = "mydiv8">
    static std::string path = "";
    if (pNode-&gt;path_ != path)
    {<button onclick = "myFunc9()">+</button><div id = "mydiv9">
      std::cout &lt;&lt; "\n    -- " &lt;&lt; pNode-&gt;path_ &lt;&lt; "\\" &lt;&lt; pNode-&gt;package_;
      path = pNode-&gt;path_;
    }</div>
    if (doDisplay(pNode))
    {<button onclick = "myFunc10()">+</button><div id = "mydiv10">
      std::cout &lt;&lt; "\n  " &lt;&lt; pNode-&gt;name_;
      std::cout &lt;&lt; ", " &lt;&lt; pNode-&gt;type_;
    }</div>
    for (auto pChild : pNode-&gt;children_)
      DFS(pChild);
  }</div>

  inline void TypeAnal::doTypeAnal()
  {<button onclick = "myFunc11()">+</button><div id = "mydiv11">
    std::cout &lt;&lt; "\n  starting type analysis:\n";
    std::cout &lt;&lt; "\n  scanning AST and displaying important things:";
    std::cout &lt;&lt; "\n -----------------------------------------------";
    ASTNode* pRoot = ASTref_.root();
    DFS(pRoot);
    std::cout &lt;&lt; "\n\n  the rest is for you to complete\n";
  }</div>
}</div>

*/

</pre></body></html>