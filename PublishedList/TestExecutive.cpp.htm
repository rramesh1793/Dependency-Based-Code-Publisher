<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "CodePublisher.h.htm">CodePublisher.h - CodePublisher.h.htm</a><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "Dependency.h.htm">Dependency.h - Dependency.h.htm</a><br><a href = "Display.h.htm">Display.h - Display.h.htm</a><br><a href = "Executive.h.htm">Executive.h - Executive.h.htm</a><br><a href = "FileSystem.h.htm">FileSystem.h - FileSystem.h.htm</a><br><a href = "Logger.h.htm">Logger.h - Logger.h.htm</a><br><a href = "NoSqlDatabaseApp.h.htm">NoSqlDatabaseApp.h - NoSqlDatabaseApp.h.htm</a><br><a href = "StrongComponent.h.htm">StrongComponent.h - StrongComponent.h.htm</a><br><a href = "TestExecutive.cpp.htm">TestExecutive.cpp - TestExecutive.cpp.htm</a><br><a href = "TypeTable.h.htm">TypeTable.h - TypeTable.h.htm</a><br><br><br>/////////////////////////////////////////////////////////////////////
//	CSE 687 Project 3-  Dependency based CodePublisher			   //
//  Test Executive.cpp - code to demonstrate requirements 1- 10     //
//  ver 1.0                                                        //
//  Language:      Visual C++ 2008, SP1                            //
//  Platform:      MacBook Pro,Windows 10    			           //
//  Application:   CodeAnalyzerEx                                  //
//  Author:        Rajesh Ramesh  SU ID: 416867192                 //
/////////////////////////////////////////////////////////////////////

#include "../TypeTable/TypeTable.h"
#include "../Dependency/Dependency.h"
#include "../StrongComponent/StrongComponent.h"
#include "../StrongComponent/StrongComponent.h"
#include "../Persistance/Persistance.h"
#include "SourceFiles.h"
#include "../Parser/Parser.h"
#include "../FileSystem/FileSystem.h"
#include "../FileMgr/FileMgr.h"
#include "../Display/Display.h"
#include "../Parser/ActionsAndRules.h"
#include "../Parser/ConfigureParser.h"
#include "../AbstractSyntaxTree/AbstrSynTree.h"
#include "../Logger/Logger.h"
#include "../Utilities/Utilities.h"
#include "../Analyzer/DepAnal.h"
#include "../Analyzer/Executive.h"
#include "../CodePublisher/CodePublisher.h"
#include &lt;functional&gt;
#include &lt;chrono&gt;
#include &lt;ctime&gt;
#include &lt;exception&gt;
#include &lt;algorithm&gt;
#include &lt;map&gt;
#include &lt;unordered_map&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt;
using Key = std::string;
using Keys = std::vector&lt;Key&gt;;
using Rslt = Logging::StaticLogger&lt;0&gt;;  
using Demo = Logging::StaticLogger&lt;1&gt;;  
using Dbug = Logging::StaticLogger&lt;2&gt;;  
using File = std::string;
using Path = std::string;
using Files = std::vector&lt;File&gt;;
using Pattern = std::string;
using Ext = std::string;
using FileMap = std::unordered_map&lt;Pattern, Files&gt;;
using namespace CodeAnalysis;


////////////////////////////////////////////////////////////////////////////
//Used to create a TypeTable to store information for dependency analysis//
//////////////////////////////////////////////////////////////////////////
NoSqlDatabaseApp Type_Table()
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
	TypeAnalysis tanal;
	NoSqlDatabaseApp dbtypetab;
	tanal.doTypeAnalysis(dbtypetab);
	Display_Type_Analysis(dbtypetab);
	return dbtypetab;
}</div>
/////////////////////////////////////////////
////Files are assigned respective numbers///
///////////////////////////////////////////

std::unordered_map&lt;int, File&gt; revCalc(Files allFiles)
{<button onclick = "myFunc2()">+</button><div id = "mydiv2">
	int counter = 0;
	std::unordered_map&lt;File, int&gt; fMap;
	std::unordered_map&lt;int, File&gt; revf;
	for (File file : allFiles)
	{<button onclick = "myFunc3()">+</button><div id = "mydiv3"> fMap[FileSystem::Path::getName(file)] = counter;
	counter++;
	}</div>
	std::vector&lt;vector&lt;int&gt;&gt; rfMap;
	std::vector&lt;File&gt; kfkeys;
	kfkeys.reserve(fMap.size());
	std::vector&lt;int&gt; vals;
	for (auto kv : fMap)
	{<button onclick = "myFunc4()">+</button><div id = "mydiv4"> kfkeys.push_back(kv.first);
	  vals.push_back(kv.second);
   	 revf[kv.second] = kv.first;
	}</div> return revf; }</div>

///////////////////////////////////////
//Used to create a Dependency Table///
/////////////////////////////////////
Dependency Dependency_Table(NoSqlDatabaseApp db, Files allFiles)
{<button onclick = "myFunc5()">+</button><div id = "mydiv5">
	Dependency dbnew;
	control cont;
	cont.doActivity(db, dbnew, allFiles);
	Display_Dependency_Table(dbnew);
	return dbnew;
}</div>
//////////////////////////////////////////////////////////////////////
// Searches to discover the strong components for file dependencies//
////////////////////////////////////////////////////////////////////

std::vector&lt;vector&lt;int&gt;&gt; SCCRequirement(Files allFiles,Dependency dbnew)
{<button onclick = "myFunc6()">+</button><div id = "mydiv6">
	std::vector&lt;vector&lt;int&gt;&gt; rfMap;
	int counter = 0;
	std::vector&lt;int&gt; vec;
	std::unordered_map&lt;File, int&gt; fMap;
	std::unordered_map&lt;int, File&gt; rev1;

	for (File file : allFiles)
	{<button onclick = "myFunc7()">+</button><div id = "mydiv7"> fMap[FileSystem::Path::getName(file)] = counter;
		counter++; }</div>
	std::vector&lt;File&gt; kfkeys;
	kfkeys.reserve(fMap.size());
	std::vector&lt;int&gt; vals;
	vals.reserve(fMap.size());
	for (auto kv : fMap)
	{<button onclick = "myFunc8()">+</button><div id = "mydiv8"> kfkeys.push_back(kv.first);
		vals.push_back(kv.second);
		rev1[kv.second] = kv.first; }</div>
    Graph g1(counter);
	Keys k = dbnew.keys();
	for (std::string key : k)
	{<button onclick = "myFunc9()">+</button><div id = "mydiv9"> for (ElementItem child : dbnew.value(key))
		{<button onclick = "myFunc10()">+</button><div id = "mydiv10">for (std::string c : child.childrenList)
		{<button onclick = "myFunc11()">+</button><div id = "mydiv11"> g1.addEdge(fMap[key], fMap[c]);}</div>
		}</div>}</div>
    rfMap = g1.SCC();
	Display_StrConnComp(rfMap, rev1);
	return rfMap;
}</div>

//Function that displays contents of index page 
void procindex(std::ofstream& outofindex, Keys dbkeys)
{<button onclick = "myFunc12()">+</button><div id = "mydiv12">
	outofindex &lt;&lt; "&lt;html&gt;&lt;head&gt;&lt;title&gt;HTML Reference&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;&lt;br&gt;&lt;br&gt;The Index of dependency files are as follows&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;";
	for (File filename : dbkeys)
	{<button onclick = "myFunc13()">+</button><div id = "mydiv13">
		std::string name = FileSystem::Path::getName(filename);
		std::string endpath = name + ".htm";
		outofindex &lt;&lt; "&lt;a href = \"";
		outofindex &lt;&lt; endpath;
		outofindex &lt;&lt; "\"";
		outofindex &lt;&lt; "&gt;";
		outofindex&lt;&lt; name;
		outofindex &lt;&lt; "&lt;/a&gt;";
		outofindex &lt;&lt; "&lt;br&gt;";
		outofindex &lt;&lt; "&lt;br&gt;";
		outofindex &lt;&lt; "&lt;br&gt;";
		outofindex &lt;&lt; "&lt;br&gt;";
	}</div>
	outofindex &lt;&lt; "&lt;br&gt;";
	outofindex &lt;&lt; "&lt;br&gt;";
	outofindex &lt;&lt; "&lt;/pre";
	outofindex &lt;&lt; "&lt;/body&gt;";
	outofindex &lt;&lt; "&lt;/html&gt;";
	outofindex.close();
	std::string path = "file:///" + FileSystem::Path::getFullFileSpec("../../PublishedList/index.htm");
	std::wstring spath = std::wstring(path.begin(), path.end());
	LPCWSTR swpath = spath.c_str();
	LPCWSTR a = L"open";
	LPCWSTR ie = L"iexplore.exe";
	ShellExecute(NULL, a, ie, swpath, NULL, SW_SHOWDEFAULT);
}</div>

void callrequirements() //Function to display all requirments
{<button onclick = "myFunc14()">+</button><div id = "mydiv14">	std::cout &lt;&lt; "\n Requirement 1 Demonstrated - Used Visual Studio 2015 and its C++ Windows Console Projects, as provided in the ECS computer labs \n";
	std::cout &lt;&lt; "\n Requirement 2 Demonstrated - Used the C++ standard library's streams for all I/O and new and delete for all heap-based memory management\n";
	std::cout &lt;&lt; "\n Requirement 3 Demonstrated - Provided a Publisher program that provides for creation of web pages each of which captures the content of a single C++ source code file, e.g., *.h or *.cpp.\n";
	std::cout &lt;&lt; "\n Requirement 4 Demonstrated - Facility to expand or collapse class bodies, methods, and global functions using JavaScript and CSS properties \n";
	std::cout &lt;&lt; "\n Requirement 5 Demonstrated - Provided a CSS style sheet that the Publisher uses to style its generated pages and a JavaScript file that provides functionality to hide and unhide sections of code for outlining, using mouse clicks \n";
	std::cout &lt;&lt; "\n Requirement 6 Demonstrated - Embedded in each web page's &lt;head&gt; section links to the style sheet and JavaScript file \n\n";
	std::cout &lt;&lt; "\n Requirement 7 Demonstrated - Embedded HTML5 links to dependent files with a label, at the top of the web page. Publisher uses functionality from my Project #2 to discover package dependencies within the published set of source files \n";
	std::cout &lt;&lt; "\n Requirement 8 Demonstrated - Developed command line processing to define the files to publish by specifying path and file patterns \n";
	std::cout &lt;&lt; "\n Requirement 9 Demonstrated - Demonstrated the CodePublisher functionality by publishing all the important packages in Project #3 \n";
	std::cout &lt;&lt; "\n Requirement 10 Demonstrated - Included an automated unit test suite that demonstrates meeting of all the requirements of this project\n";
}</div>

////////////////////////////////////
//Main function of Test Executive//
//////////////////////////////////
int main(int argc, char* argv[])
{<button onclick = "myFunc15()">+</button><div id = "mydiv15">
	CodeAnalysisExecutive codeanexec;
	try
	{<button onclick = "myFunc16()">+</button><div id = "mydiv16">
		bool succeeded = codeanexec.ProcessCommandLine(argc, argv);
		if (!succeeded)
		{<button onclick = "myFunc17()">+</button><div id = "mydiv17">
			return 1;
		}</div>
		codeanexec.getSourceFiles();
		codeanexec.processSourceCode(true);
		std::ostringstream out;
		FileMap fileMapTemp = codeanexec.getFileMap();
		Files allFiles;
		using Pair = std::pair&lt;Pattern, Files&gt;;
		for (Pair pair : fileMapTemp)
		{<button onclick = "myFunc18()">+</button><div id = "mydiv18">
			for (File f : pair.second)
			{<button onclick = "myFunc19()">+</button><div id = "mydiv19">
				allFiles.push_back(f);
			}</div>
		}</div>  std::cout &lt;&lt; setw(8) &lt;&lt; "\n CSE 687 Project 3 - Dependency based CodePublisher \n";
		callrequirements();
		NoSqlDatabaseApp dbtype = Type_Table();
		Dependency dbnew = Dependency_Table(dbtype, allFiles);
		CodePublisher p; //Code publishing starts from here
        File index = "../PublishedList/index.htm";
		std::ofstream outofindex(index);
		File jsscript = "../PublishedList/jsscript.js";
		std::ofstream ofjs1(jsscript);
		File cssstyle = "../PublishedList/cssstyle.css";
		std::ofstream ofcss(cssstyle);
		ofcss &lt;&lt; "body {<button onclick = "myFunc20()">+</button><div id = "mydiv20">background-color: #AFEEEE;}</div>";
		ofcss &lt;&lt; "font: 15px arial, sans-serif;";
		Keys dbkeys = dbnew.keys();
		for (Key key : dbkeys)
		{<button onclick = "myFunc21()">+</button><div id = "mydiv21">		for (ElementItem elem : dbnew.value(key))
			{<button onclick = "myFunc22()">+</button><div id = "mydiv22">
				p.publish(key, elem, ofjs1);	}</div>
		}</div>
		procindex(outofindex, dbkeys);
	}</div>
catch (std::exception& excep)
{<button onclick = "myFunc23()">+</button><div id = "mydiv23"> codeanexec.flushLogger();
  std::cout &lt;&lt; "\n\n  exception caught in Test Executive::main: " + std::string(excep.what()) + "\n\n";
  codeanexec.stopLogger();
  return 1;}</div>
return 0; }</div>


</pre></body></html>