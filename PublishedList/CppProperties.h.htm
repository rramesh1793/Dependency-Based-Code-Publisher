<html><head> <link rel = "stylesheet" type = "text/css"  href="cssstyle.css"/></head><body><head><script type="text/javascript" src = "jsscript.js"></script></head><pre><br><br><br><a href = "Convert.cpp.htm">Convert.cpp - Convert.cpp.htm</a><br><a href = "CppProperties.h.htm">CppProperties.h - CppProperties.h.htm</a><br><br><br>#pragma once
/////////////////////////////////////////////////////////////////////
// CppProperties.h - Defines read/write and read only properties   //
// ver 1.1                                                         //
// Source: Michael Litvin (see link below)                         //
// Jim Fawcett, CSE687 - Object Oriented Design, Spring 2017       //
/////////////////////////////////////////////////////////////////////
//
// Got the idea from discussion here (scroll down about halfway):
// http://stackoverflow.com/questions/8368512/does-c11-have-c-style-properties
// This implementation is quite different however.
/*
 * Note:
 * -----
 *   These properties provide virtual methods to support changing the
 *   operation of getter and setter.  But, you don't usually want to
 *   override because that changes the name of the property.  For example
 *   see the Y class defined in CppProperties.cpp.
 *
 *   Instead, you should prefer to use the methods to provide new getter
 *   and setter functions to change the property behaviors, as that
 *   does not change the user's interface.
 *
 * Maintenance History:
 * --------------------
 * ver 1.1 : Jan 28 2017
 * - fixed bug in Property class by removing bound data from all lambdas.
 * ver 1.0 : Jan 08 2017
 * - first release
 *
*/
#include &lt;iostream&gt;
#include &lt;functional&gt;

/////////////////////////////////////////////////////////////////////
// Property&lt;T&gt; class provides encapsulated properties for C++
// - getter and setter functions can be customized without changing
//   the client interface for any class that uses Property&lt;T&gt;
//
template&lt;typename T&gt;
class Property
{<button onclick = "myFunc1()">+</button><div id = "mydiv1">
public:
  using SetterType = std::function&lt;T(const T&t)&gt;;
  using GetterType = std::function&lt;T(const T&t)&gt;;

  // initialize the property field

  Property() : value(T()) {<button onclick = "myFunc2()">+</button><div id = "mydiv2">}</div>
  Property(const T& t) : value(t) {<button onclick = "myFunc3()">+</button><div id = "mydiv3">}</div>
  virtual ~Property() {<button onclick = "myFunc4()">+</button><div id = "mydiv4">}</div>
  
  // set the property field with assignment operator

  virtual Property&lt;T&gt;& operator=(const T &t)
  {<button onclick = "myFunc5()">+</button><div id = "mydiv5"> 
    value = setter_(t); 
    return *this; 
  }</div>
  // get the property field with cast operator

  virtual operator const T() const {<button onclick = "myFunc6()">+</button><div id = "mydiv6"> return getter_(value); }</div>
  
  // define methods to customize getter and setter behaviors

  void newSetter(SetterType sttr) {<button onclick = "myFunc7()">+</button><div id = "mydiv7"> setter_ = sttr; }</div>
  void newGetter(GetterType gttr) {<button onclick = "myFunc8()">+</button><div id = "mydiv8"> getter_ = gttr; }</div>

  T getValue() {<button onclick = "myFunc9()">+</button><div id = "mydiv9"> return value; }</div>  // may be needed by custom getters

protected:
  T value;  // property field

  // define default getter and setter behavior using lambdas

  SetterType setter_ = [](const T& t) {<button onclick = "myFunc10()">+</button><div id = "mydiv10"> return t; }</div>;   // default setter
  GetterType getter_ = [](const T& v) {<button onclick = "myFunc11()">+</button><div id = "mydiv11"> return v; }</div>;   // default getter
}</div>;

/*----&lt; overload insertion operator for std::string properties &gt;---*/

std::ostream& operator&lt;&lt;(std::ostream& out, Property&lt;std::string&gt;& p)
{<button onclick = "myFunc12()">+</button><div id = "mydiv12">
  std::string temp = p;
  try {<button onclick = "myFunc13()">+</button><div id = "mydiv13">
    out &lt;&lt; (temp).c_str();
  }</div>
  catch (std::exception& ex)
  {<button onclick = "myFunc14()">+</button><div id = "mydiv14">
    std::cout &lt;&lt; "\n  exception:\n  " &lt;&lt; ex.what() &lt;&lt; "\n";
  }</div>
  return out;
}</div>

/////////////////////////////////////////////////////////////////////
// Property&lt;const T&gt; class provides encapsulated properties for C++
// - getter function can be customized without changing
//   the client interface for any class that uses Property&lt;T&gt;
// - no setter is provided since the class is used for const properties
// - comments for this class would be same as above, and so are omitted
//
template&lt;typename T&gt;
class Property&lt;const T&gt;
{<button onclick = "myFunc15()">+</button><div id = "mydiv15">
public:
  using SetterType = std::function&lt;T(const T&t)&gt;;
  using GetterType = std::function&lt;T(const T&t)&gt;;

  Property() : value(T()) {<button onclick = "myFunc16()">+</button><div id = "mydiv16">}</div>
  Property(const T& t) : value(t) {<button onclick = "myFunc17()">+</button><div id = "mydiv17">}</div>
  virtual ~Property() {<button onclick = "myFunc18()">+</button><div id = "mydiv18">}</div>
  void newGetter(GetterType gttr) {<button onclick = "myFunc19()">+</button><div id = "mydiv19"> getter_ = gttr; }</div>
  virtual operator const T() const {<button onclick = "myFunc20()">+</button><div id = "mydiv20"> return getter_(value); }</div>
  T getValue() {<button onclick = "myFunc21()">+</button><div id = "mydiv21"> return value; }</div>                      // used by custom getters
protected:
  T value;
  GetterType getter_ = [](const T& v) {<button onclick = "myFunc22()">+</button><div id = "mydiv22"> return v; }</div>;  // default getter
}</div>;

/*----&lt; overload insertion operator for std::string properties &gt;---*/

std::ostream& operator&lt;&lt;(std::ostream& out, Property&lt;const std::string&gt;& p)
{<button onclick = "myFunc23()">+</button><div id = "mydiv23">
  std::string temp = p;
  try {<button onclick = "myFunc24()">+</button><div id = "mydiv24">
    out &lt;&lt; (temp).c_str();
  }</div>
  catch (std::exception& ex)
  {<button onclick = "myFunc25()">+</button><div id = "mydiv25">
    std::cout &lt;&lt; "\n  exception:\n  " &lt;&lt; ex.what() &lt;&lt; "\n";
  }</div>
  return out;
}</div>


</pre></body></html>